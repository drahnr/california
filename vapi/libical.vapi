/* libical.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "")]
namespace iCal {
	[CCode (cheader_filename = "libical/ical.h", free_function = "icalarray_free")]
	[Compact]
	public class icalarray {
		public void* data;
		public uint element_size;
		public uint increment_size;
		public uint num_elements;
		public uint space_allocated;
		[CCode (cname = "icalarray_new", has_construct_function = false)]
		public icalarray (int element_size, int increment_size);
		[CCode (cname = "icalarray_append")]
		public void append (void* element);
		[CCode (cname = "icalarray_element_at")]
		public void* element_at (int position);
		[CCode (cname = "icalarray_remove_element_at")]
		public void remove_element_at (int position);
		[CCode (cname = "icalarray_sort")]
		public void sort (GLib.Callback compare);
	}
	[CCode (cheader_filename = "libical/ical.h", ref_function = "icalattach_ref", ref_function_void = true, unref_function = "icalattach_unref")]
	[Compact]
	public class icalattach {
		[CCode (cname = "icalattach_new_from_data", has_construct_function = false)]
		public icalattach.from_data (uint data, iCal.icalattach_free_fn_t free_fn, void* free_fn_data);
		[CCode (cname = "icalattach_new_from_url", has_construct_function = false)]
		public icalattach.from_url (string url);
		[CCode (cname = "icalattach_get_data")]
		public uint get_data ();
		[CCode (cname = "icalattach_get_is_url")]
		public int get_is_url ();
		[CCode (cname = "icalattach_get_url")]
		public unowned string get_url ();
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class icalcompiter {
		public weak iCal.pvl_elem iter;
		public iCal.icalcomponent_kind kind;
		[CCode (cname = "icalcompiter_deref")]
		public unowned iCal.icalcomponent deref ();
		[CCode (cname = "icalcompiter_next")]
		public unowned iCal.icalcomponent next ();
		[CCode (cname = "icalcompiter_prior")]
		public unowned iCal.icalcomponent prior ();
	}
	[CCode (cheader_filename = "libical/ical.h", free_function = "icalcomponent_free")]
	[Compact]
	public class icalcomponent {
		[CCode (cname = "icalcomponent_new", has_construct_function = false)]
		public icalcomponent (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_add_component")]
		public void add_component (iCal.icalcomponent child);
		[CCode (cname = "icalcomponent_add_property")]
		public void add_property (iCal.icalproperty property);
		[CCode (cname = "icalcomponent_as_ical_string")]
		public unowned string as_ical_string ();
		[CCode (cname = "icalcomponent_as_ical_string_r")]
		public string as_ical_string_r ();
		[CCode (cname = "icalcomponent_begin_component")]
		public unowned iCal.icalcompiter begin_component (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_check_restrictions")]
		public int check_restrictions ();
		[CCode (cname = "icalcomponent_new_clone")]
		public icalcomponent clone ();
		[CCode (cname = "icalcomponent_convert_errors")]
		public void convert_errors ();
		[CCode (cname = "icalcomponent_count_components")]
		public int count_components (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_count_errors")]
		public int count_errors ();
		[CCode (cname = "icalcomponent_count_properties")]
		public int count_properties (iCal.icalproperty_kind kind);
		[CCode (cname = "icalcomponent_end_component")]
		public unowned iCal.icalcompiter end_component (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_foreach_recurrence")]
		public void foreach_recurrence (iCal.icaltimetype start, iCal.icaltimetype end, GLib.Callback callback, void* callback_data);
		[CCode (cname = "icalcomponent_foreach_tzid")]
		public void foreach_tzid (GLib.Callback callback, void* callback_data);
		[CCode (cname = "icalcomponent_new_from_string", has_construct_function = false)]
		public icalcomponent.from_string (string str);
		[CCode (cname = "icalcomponent_get_comment")]
		public unowned string get_comment ();
		[CCode (cname = "icalcomponent_get_current_component")]
		public unowned iCal.icalcomponent? get_current_component ();
		[CCode (cname = "icalcomponent_get_current_property")]
		public unowned iCal.icalproperty? get_current_property ();
		[CCode (cname = "icalcomponent_get_description")]
		public unowned string get_description ();
		[CCode (cname = "icalcomponent_get_dtend")]
		public iCal.icaltimetype get_dtend ();
		[CCode (cname = "icalcomponent_get_dtstamp")]
		public iCal.icaltimetype get_dtstamp ();
		[CCode (cname = "icalcomponent_get_dtstart")]
		public iCal.icaltimetype get_dtstart ();
		[CCode (cname = "icalcomponent_get_due")]
		public iCal.icaltimetype get_due ();
		[CCode (cname = "icalcomponent_get_duration")]
		public unowned iCal.icaldurationtype get_duration ();
		[CCode (cname = "icalcomponent_get_first_component")]
		public unowned iCal.icalcomponent? get_first_component (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_get_first_property")]
		public unowned iCal.icalproperty? get_first_property (iCal.icalproperty_kind kind);
		[CCode (cname = "icalcomponent_get_first_real_component")]
		public unowned iCal.icalcomponent get_first_real_component ();
		[CCode (cname = "icalcomponent_get_inner")]
		public unowned iCal.icalcomponent get_inner ();
		[CCode (cname = "icalcomponent_get_location")]
		public unowned string? get_location ();
		[CCode (cname = "icalcomponent_get_method")]
		public iCal.icalproperty_method get_method ();
		[CCode (cname = "icalcomponent_get_next_component")]
		public unowned iCal.icalcomponent? get_next_component (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_get_next_property")]
		public unowned iCal.icalproperty? get_next_property (iCal.icalproperty_kind kind);
		[CCode (cname = "icalcomponent_get_parent")]
		public unowned iCal.icalcomponent get_parent ();
		[CCode (cname = "icalcomponent_get_recurrenceid")]
		public iCal.icaltimetype get_recurrenceid ();
		[CCode (cname = "icalcomponent_get_relcalid")]
		public unowned string get_relcalid ();
		[CCode (cname = "icalcomponent_get_sequence")]
		public int get_sequence ();
		[CCode (cname = "icalcomponent_get_span")]
		public unowned iCal.icaltime_span get_span ();
		[CCode (cname = "icalcomponent_get_status")]
		public iCal.icalproperty_status get_status ();
		[CCode (cname = "icalcomponent_get_summary")]
		public unowned string get_summary ();
		[CCode (cname = "icalcomponent_get_timezone")]
		public unowned iCal.icaltimezone get_timezone (string tzid);
		[CCode (cname = "icalcomponent_get_uid")]
		public unowned string? get_uid ();
		[CCode (cname = "icalcomponent_is_valid")]
		public int is_valid ();
		[CCode (cname = "icalcomponent_isa")]
		public iCal.icalcomponent_kind isa ();
		[CCode (cname = "icalcomponent_isa_component")]
		public static int isa_component (void* component);
		[CCode (cname = "icalcomponent_kind_is_valid")]
		public static int kind_is_valid (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_kind_to_string")]
		public static unowned string kind_to_string (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_merge_component")]
		public void merge_component (iCal.icalcomponent comp_to_merge);
		[CCode (cname = "icalcomponent_remove_component")]
		public void remove_component (iCal.icalcomponent child);
		[CCode (cname = "icalcomponent_remove_property")]
		public void remove_property (iCal.icalproperty property);
		[CCode (cname = "icalcomponent_set_comment")]
		public void set_comment (string v);
		[CCode (cname = "icalcomponent_set_description")]
		public void set_description (string v);
		[CCode (cname = "icalcomponent_set_dtend")]
		public void set_dtend (iCal.icaltimetype v);
		[CCode (cname = "icalcomponent_set_dtstamp")]
		public void set_dtstamp (iCal.icaltimetype v);
		[CCode (cname = "icalcomponent_set_dtstart")]
		public void set_dtstart (iCal.icaltimetype v);
		[CCode (cname = "icalcomponent_set_due")]
		public void set_due (iCal.icaltimetype v);
		[CCode (cname = "icalcomponent_set_duration")]
		public void set_duration (iCal.icaldurationtype v);
		[CCode (cname = "icalcomponent_set_location")]
		public void set_location (string v);
		[CCode (cname = "icalcomponent_set_method")]
		public void set_method (iCal.icalproperty_method method);
		[CCode (cname = "icalcomponent_set_parent")]
		public void set_parent (iCal.icalcomponent parent);
		[CCode (cname = "icalcomponent_set_recurrenceid")]
		public void set_recurrenceid (iCal.icaltimetype v);
		[CCode (cname = "icalcomponent_set_relcalid")]
		public void set_relcalid (string v);
		[CCode (cname = "icalcomponent_set_sequence")]
		public void set_sequence (int v);
		[CCode (cname = "icalcomponent_set_status")]
		public void set_status (iCal.icalproperty_status v);
		[CCode (cname = "icalcomponent_set_summary")]
		public void set_summary (string v);
		[CCode (cname = "icalcomponent_set_uid")]
		public void set_uid (string? v);
		[CCode (cname = "icalcomponent_string_to_kind")]
		public static iCal.icalcomponent_kind string_to_kind (string str);
		[CCode (cname = "icalcomponent_strip_errors")]
		public void strip_errors ();
		[CCode (cname = "icalcomponent_new_vagenda", has_construct_function = false)]
		public icalcomponent.vagenda ();
		[CCode (cname = "icalcomponent_new_valarm", has_construct_function = false)]
		public icalcomponent.valarm ();
		[CCode (cname = "icalcomponent_vanew")]
		public static unowned iCal.icalcomponent vanew (iCal.icalcomponent_kind kind);
		[CCode (cname = "icalcomponent_new_vcalendar", has_construct_function = false)]
		public icalcomponent.vcalendar ();
		[CCode (cname = "icalcomponent_new_vevent", has_construct_function = false)]
		public icalcomponent.vevent ();
		[CCode (cname = "icalcomponent_new_vfreebusy", has_construct_function = false)]
		public icalcomponent.vfreebusy ();
		[CCode (cname = "icalcomponent_new_vjournal", has_construct_function = false)]
		public icalcomponent.vjournal ();
		[CCode (cname = "icalcomponent_new_vquery", has_construct_function = false)]
		public icalcomponent.vquery ();
		[CCode (cname = "icalcomponent_new_vtimezone", has_construct_function = false)]
		public icalcomponent.vtimezone ();
		[CCode (cname = "icalcomponent_new_vtodo", has_construct_function = false)]
		public icalcomponent.vtodo ();
		[CCode (cname = "icalcomponent_new_x", has_construct_function = false)]
		public icalcomponent.x (string x_name);
		[CCode (cname = "icalcomponent_new_xdaylight", has_construct_function = false)]
		public icalcomponent.xdaylight ();
		[CCode (cname = "icalcomponent_new_xstandard", has_construct_function = false)]
		public icalcomponent.xstandard ();
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class icaldurationtype {
		public uint days;
		public uint hours;
		public int is_neg;
		public uint minutes;
		public uint seconds;
		public uint weeks;
		[CCode (cname = "icaldurationtype_as_ical_string")]
		public unowned string as_ical_string ();
		[CCode (cname = "icaldurationtype_as_ical_string_r")]
		public string as_ical_string_r ();
		[CCode (cname = "icaldurationtype_as_int")]
		public int as_int ();
		[CCode (cname = "icaldurationtype_bad_duration")]
		public static unowned iCal.icaldurationtype bad_duration ();
		[CCode (cname = "icaldurationtype_from_int")]
		public static unowned iCal.icaldurationtype from_int (int t);
		[CCode (cname = "icaldurationtype_from_string")]
		public static unowned iCal.icaldurationtype from_string (string p1);
		[CCode (cname = "icaldurationtype_is_bad_duration")]
		public int is_bad_duration ();
		[CCode (cname = "icaldurationtype_is_null_duration")]
		public int is_null_duration ();
		[CCode (cname = "icaldurationtype_null_duration")]
		public static unowned iCal.icaldurationtype null_duration ();
	}
	[CCode (cheader_filename = "libical/ical.h", free_function = "icalparameter_free")]
	[Compact]
	public class icalparameter {
		[CCode (cname = "icalparameter_new", has_construct_function = false)]
		public icalparameter (iCal.icalparameter_kind kind);
		[CCode (cname = "icalparameter_new_actionparam", has_construct_function = false)]
		public icalparameter.actionparam (iCal.icalparameter_action v);
		[CCode (cname = "icalparameter_new_altrep", has_construct_function = false)]
		public icalparameter.altrep (string v);
		[CCode (cname = "icalparameter_as_ical_string")]
		public unowned string as_ical_string ();
		[CCode (cname = "icalparameter_as_ical_string_r")]
		public string as_ical_string_r ();
		[CCode (cname = "icalparameter_new_charset", has_construct_function = false)]
		public icalparameter.charset (string v);
		[CCode (cname = "icalparameter_new_clone", has_construct_function = false)]
		public icalparameter.clone (iCal.icalparameter p);
		[CCode (cname = "icalparameter_new_cn", has_construct_function = false)]
		public icalparameter.cn (string v);
		[CCode (cname = "icalparameter_new_cutype", has_construct_function = false)]
		public icalparameter.cutype (iCal.icalparameter_cutype v);
		[CCode (cname = "icalparameter_new_delegatedfrom", has_construct_function = false)]
		public icalparameter.delegatedfrom (string v);
		[CCode (cname = "icalparameter_new_delegatedto", has_construct_function = false)]
		public icalparameter.delegatedto (string v);
		[CCode (cname = "icalparameter_new_dir", has_construct_function = false)]
		public icalparameter.dir (string v);
		[CCode (cname = "icalparameter_new_enable", has_construct_function = false)]
		public icalparameter.enable (iCal.icalparameter_enable v);
		[CCode (cname = "icalparameter_new_encoding", has_construct_function = false)]
		public icalparameter.encoding (iCal.icalparameter_encoding v);
		[CCode (cname = "icalparameter_enum_to_string")]
		public static unowned string enum_to_string (int e);
		[CCode (cname = "icalparameter_new_fbtype", has_construct_function = false)]
		public icalparameter.fbtype (iCal.icalparameter_fbtype v);
		[CCode (cname = "icalparameter_new_fmttype", has_construct_function = false)]
		public icalparameter.fmttype (string v);
		[CCode (cname = "icalparameter_new_from_string", has_construct_function = false)]
		public icalparameter.from_string (string value);
		[CCode (cname = "icalparameter_new_from_value_string", has_construct_function = false)]
		public icalparameter.from_value_string (iCal.icalparameter_kind kind, string value);
		[CCode (cname = "icalparameter_get_actionparam")]
		public iCal.icalparameter_action get_actionparam ();
		[CCode (cname = "icalparameter_get_altrep")]
		public unowned string get_altrep ();
		[CCode (cname = "icalparameter_get_charset")]
		public unowned string get_charset ();
		[CCode (cname = "icalparameter_get_cn")]
		public unowned string get_cn ();
		[CCode (cname = "icalparameter_get_cutype")]
		public iCal.icalparameter_cutype get_cutype ();
		[CCode (cname = "icalparameter_get_delegatedfrom")]
		public unowned string get_delegatedfrom ();
		[CCode (cname = "icalparameter_get_delegatedto")]
		public unowned string get_delegatedto ();
		[CCode (cname = "icalparameter_get_dir")]
		public unowned string get_dir ();
		[CCode (cname = "icalparameter_get_enable")]
		public iCal.icalparameter_enable get_enable ();
		[CCode (cname = "icalparameter_get_encoding")]
		public iCal.icalparameter_encoding get_encoding ();
		[CCode (cname = "icalparameter_get_fbtype")]
		public iCal.icalparameter_fbtype get_fbtype ();
		[CCode (cname = "icalparameter_get_fmttype")]
		public unowned string get_fmttype ();
		[CCode (cname = "icalparameter_get_id")]
		public unowned string get_id ();
		[CCode (cname = "icalparameter_get_language")]
		public unowned string get_language ();
		[CCode (cname = "icalparameter_get_latency")]
		public unowned string get_latency ();
		[CCode (cname = "icalparameter_get_local")]
		public iCal.icalparameter_local get_local ();
		[CCode (cname = "icalparameter_get_localize")]
		public unowned string get_localize ();
		[CCode (cname = "icalparameter_get_member")]
		public unowned string get_member ();
		[CCode (cname = "icalparameter_get_options")]
		public unowned string get_options ();
		[CCode (cname = "icalparameter_get_partstat")]
		public iCal.icalparameter_partstat get_partstat ();
		[CCode (cname = "icalparameter_get_range")]
		public iCal.icalparameter_range get_range ();
		[CCode (cname = "icalparameter_get_related")]
		public iCal.icalparameter_related get_related ();
		[CCode (cname = "icalparameter_get_reltype")]
		public iCal.icalparameter_reltype get_reltype ();
		[CCode (cname = "icalparameter_get_role")]
		public iCal.icalparameter_role get_role ();
		[CCode (cname = "icalparameter_get_rsvp")]
		public iCal.icalparameter_rsvp get_rsvp ();
		[CCode (cname = "icalparameter_get_sentby")]
		public unowned string get_sentby ();
		[CCode (cname = "icalparameter_get_tzid")]
		public unowned string? get_tzid ();
		[CCode (cname = "icalparameter_get_value")]
		public iCal.icalparameter_value get_value ();
		[CCode (cname = "icalparameter_get_x")]
		public unowned string get_x ();
		[CCode (cname = "icalparameter_get_xliccomparetype")]
		public iCal.icalparameter_xliccomparetype get_xliccomparetype ();
		[CCode (cname = "icalparameter_get_xlicerrortype")]
		public iCal.icalparameter_xlicerrortype get_xlicerrortype ();
		[CCode (cname = "icalparameter_get_xname")]
		public unowned string get_xname ();
		[CCode (cname = "icalparameter_get_xvalue")]
		public unowned string get_xvalue ();
		[CCode (cname = "icalparameter_new_id", has_construct_function = false)]
		public icalparameter.id (string v);
		[CCode (cname = "icalparameter_is_valid")]
		public int is_valid ();
		[CCode (cname = "icalparameter_isa")]
		public iCal.icalparameter_kind isa ();
		[CCode (cname = "icalparameter_isa_parameter")]
		public static int isa_parameter (void* param);
		[CCode (cname = "icalparameter_kind_to_string")]
		public static unowned string kind_to_string (iCal.icalparameter_kind kind);
		[CCode (cname = "icalparameter_new_language", has_construct_function = false)]
		public icalparameter.language (string v);
		[CCode (cname = "icalparameter_new_latency", has_construct_function = false)]
		public icalparameter.latency (string v);
		[CCode (cname = "icalparameter_new_local", has_construct_function = false)]
		public icalparameter.local (iCal.icalparameter_local v);
		[CCode (cname = "icalparameter_new_localize", has_construct_function = false)]
		public icalparameter.localize (string v);
		[CCode (cname = "icalparameter_new_member", has_construct_function = false)]
		public icalparameter.member (string v);
		[CCode (cname = "icalparameter_new_options", has_construct_function = false)]
		public icalparameter.options (string v);
		[CCode (cname = "icalparameter_new_partstat", has_construct_function = false)]
		public icalparameter.partstat (iCal.icalparameter_partstat v);
		[CCode (cname = "icalparameter_new_range", has_construct_function = false)]
		public icalparameter.range (iCal.icalparameter_range v);
		[CCode (cname = "icalparameter_new_related", has_construct_function = false)]
		public icalparameter.related (iCal.icalparameter_related v);
		[CCode (cname = "icalparameter_new_reltype", has_construct_function = false)]
		public icalparameter.reltype (iCal.icalparameter_reltype v);
		[CCode (cname = "icalparameter_new_role", has_construct_function = false)]
		public icalparameter.role (iCal.icalparameter_role v);
		[CCode (cname = "icalparameter_new_rsvp", has_construct_function = false)]
		public icalparameter.rsvp (iCal.icalparameter_rsvp v);
		[CCode (cname = "icalparameter_new_sentby", has_construct_function = false)]
		public icalparameter.sentby (string v);
		[CCode (cname = "icalparameter_set_actionparam")]
		public void set_actionparam (iCal.icalparameter_action v);
		[CCode (cname = "icalparameter_set_altrep")]
		public void set_altrep (string v);
		[CCode (cname = "icalparameter_set_charset")]
		public void set_charset (string v);
		[CCode (cname = "icalparameter_set_cn")]
		public void set_cn (string v);
		[CCode (cname = "icalparameter_set_cutype")]
		public void set_cutype (iCal.icalparameter_cutype v);
		[CCode (cname = "icalparameter_set_delegatedfrom")]
		public void set_delegatedfrom (string v);
		[CCode (cname = "icalparameter_set_delegatedto")]
		public void set_delegatedto (string v);
		[CCode (cname = "icalparameter_set_dir")]
		public void set_dir (string v);
		[CCode (cname = "icalparameter_set_enable")]
		public void set_enable (iCal.icalparameter_enable v);
		[CCode (cname = "icalparameter_set_encoding")]
		public void set_encoding (iCal.icalparameter_encoding v);
		[CCode (cname = "icalparameter_set_fbtype")]
		public void set_fbtype (iCal.icalparameter_fbtype v);
		[CCode (cname = "icalparameter_set_fmttype")]
		public void set_fmttype (string v);
		[CCode (cname = "icalparameter_set_id")]
		public void set_id (string v);
		[CCode (cname = "icalparameter_set_language")]
		public void set_language (string v);
		[CCode (cname = "icalparameter_set_latency")]
		public void set_latency (string v);
		[CCode (cname = "icalparameter_set_local")]
		public void set_local (iCal.icalparameter_local v);
		[CCode (cname = "icalparameter_set_localize")]
		public void set_localize (string v);
		[CCode (cname = "icalparameter_set_member")]
		public void set_member (string v);
		[CCode (cname = "icalparameter_set_options")]
		public void set_options (string v);
		[CCode (cname = "icalparameter_set_partstat")]
		public void set_partstat (iCal.icalparameter_partstat v);
		[CCode (cname = "icalparameter_set_range")]
		public void set_range (iCal.icalparameter_range v);
		[CCode (cname = "icalparameter_set_related")]
		public void set_related (iCal.icalparameter_related v);
		[CCode (cname = "icalparameter_set_reltype")]
		public void set_reltype (iCal.icalparameter_reltype v);
		[CCode (cname = "icalparameter_set_role")]
		public void set_role (iCal.icalparameter_role v);
		[CCode (cname = "icalparameter_set_rsvp")]
		public void set_rsvp (iCal.icalparameter_rsvp v);
		[CCode (cname = "icalparameter_set_sentby")]
		public void set_sentby (string v);
		[CCode (cname = "icalparameter_set_tzid")]
		public void set_tzid (string v);
		[CCode (cname = "icalparameter_set_value")]
		public void set_value (iCal.icalparameter_value v);
		[CCode (cname = "icalparameter_set_x")]
		public void set_x (string v);
		[CCode (cname = "icalparameter_set_xliccomparetype")]
		public void set_xliccomparetype (iCal.icalparameter_xliccomparetype v);
		[CCode (cname = "icalparameter_set_xlicerrortype")]
		public void set_xlicerrortype (iCal.icalparameter_xlicerrortype v);
		[CCode (cname = "icalparameter_set_xname")]
		public void set_xname (string v);
		[CCode (cname = "icalparameter_set_xvalue")]
		public void set_xvalue (string v);
		[CCode (cname = "icalparameter_string_to_enum")]
		public static int string_to_enum (string str);
		[CCode (cname = "icalparameter_string_to_kind")]
		public static iCal.icalparameter_kind string_to_kind (string str);
		[CCode (cname = "icalparameter_new_tzid", has_construct_function = false)]
		public icalparameter.tzid (string v);
		[CCode (cname = "icalparameter_new_value", has_construct_function = false)]
		public icalparameter.value (iCal.icalparameter_value v);
		[CCode (cname = "icalparameter_value_to_value_kind")]
		public static iCal.icalvalue_kind value_to_value_kind (iCal.icalparameter_value value);
		[CCode (cname = "icalparameter_new_x", has_construct_function = false)]
		public icalparameter.x (string v);
		[CCode (cname = "icalparameter_new_xliccomparetype", has_construct_function = false)]
		public icalparameter.xliccomparetype (iCal.icalparameter_xliccomparetype v);
		[CCode (cname = "icalparameter_new_xlicerrortype", has_construct_function = false)]
		public icalparameter.xlicerrortype (iCal.icalparameter_xlicerrortype v);
	}
	[CCode (cheader_filename = "libical/ical.h", free_function = "icalparser_free")]
	[Compact]
	public class icalparser {
		[CCode (cname = "icalparser_new", has_construct_function = false)]
		public icalparser ();
		[CCode (cname = "icalparser_add_line")]
		public unowned iCal.icalcomponent add_line (string str);
		[CCode (cname = "icalparser_clean")]
		public unowned iCal.icalcomponent clean ();
		[CCode (cname = "icalparser_get_line")]
		public unowned string get_line (GLib.Callback line_gen_func);
		[CCode (cname = "icalparser_get_state")]
		public iCal.icalparser_state get_state ();
		[CCode (cname = "icalparser_parse")]
		public iCal.icalcomponent? parse (GLib.Callback line_gen_func);
		[CCode (cname = "icalparser_parse_string")]
		public static iCal.icalcomponent? parse_string (string str);
		[CCode (cname = "icalparser_parse_value")]
		public static unowned iCal.icalvalue parse_value (iCal.icalvalue_kind kind, string str, out unowned iCal.icalcomponent errors);
		[CCode (cname = "icalparser_set_gen_data")]
		public void set_gen_data (void* data);
		[CCode (cname = "icalparser_string_line_generator")]
		public static unowned string string_line_generator (string @out, size_t buf_size, void* d);
	}
	[CCode (cheader_filename = "libical/ical.h", free_function = "icalproperty_free")]
	[Compact]
	public class icalproperty {
		[CCode (cname = "icalproperty_new", has_construct_function = false)]
		public icalproperty (iCal.icalproperty_kind kind);
		[CCode (cname = "icalproperty_new_action", has_construct_function = false)]
		public icalproperty.action (iCal.icalproperty_action v);
		[CCode (cname = "icalproperty_add_parameter")]
		public void add_parameter (iCal.icalparameter parameter);
		[CCode (cname = "icalproperty_add_parameters")]
		public static void add_parameters (iCal.icalproperty prop, void* args);
		[CCode (cname = "icalproperty_new_allowconflict", has_construct_function = false)]
		public icalproperty.allowconflict (string v);
		[CCode (cname = "icalproperty_as_ical_string")]
		public unowned string as_ical_string ();
		[CCode (cname = "icalproperty_as_ical_string_r")]
		public string as_ical_string_r ();
		[CCode (cname = "icalproperty_new_attach", has_construct_function = false)]
		public icalproperty.attach (iCal.icalattach v);
		[CCode (cname = "icalproperty_new_attendee", has_construct_function = false)]
		public icalproperty.attendee (string v);
		[CCode (cname = "icalproperty_new_calid", has_construct_function = false)]
		public icalproperty.calid (string v);
		[CCode (cname = "icalproperty_new_calmaster", has_construct_function = false)]
		public icalproperty.calmaster (string v);
		[CCode (cname = "icalproperty_new_calscale", has_construct_function = false)]
		public icalproperty.calscale (string v);
		[CCode (cname = "icalproperty_new_capversion", has_construct_function = false)]
		public icalproperty.capversion (string v);
		[CCode (cname = "icalproperty_new_carid", has_construct_function = false)]
		public icalproperty.carid (string v);
		[CCode (cname = "icalproperty_new_carlevel", has_construct_function = false)]
		public icalproperty.carlevel (iCal.icalproperty_carlevel v);
		[CCode (cname = "icalproperty_new_categories", has_construct_function = false)]
		public icalproperty.categories (string v);
		[CCode (cname = "icalproperty_new_class", has_construct_function = false)]
		public icalproperty.@class (iCal.icalproperty_class v);
		[CCode (cname = "icalproperty_new_clone", has_construct_function = false)]
		public icalproperty.clone (iCal.icalproperty prop);
		[CCode (cname = "icalproperty_new_cmd", has_construct_function = false)]
		public icalproperty.cmd (iCal.icalproperty_cmd v);
		[CCode (cname = "icalproperty_new_comment", has_construct_function = false)]
		public icalproperty.comment (string v);
		[CCode (cname = "icalproperty_new_completed", has_construct_function = false)]
		public icalproperty.completed (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_components", has_construct_function = false)]
		public icalproperty.components (string v);
		[CCode (cname = "icalproperty_new_contact", has_construct_function = false)]
		public icalproperty.contact (string v);
		[CCode (cname = "icalproperty_count_parameters")]
		public int count_parameters ();
		[CCode (cname = "icalproperty_new_created", has_construct_function = false)]
		public icalproperty.created (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_csid", has_construct_function = false)]
		public icalproperty.csid (string v);
		[CCode (cname = "icalproperty_new_datemax", has_construct_function = false)]
		public icalproperty.datemax (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_datemin", has_construct_function = false)]
		public icalproperty.datemin (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_decreed", has_construct_function = false)]
		public icalproperty.decreed (string v);
		[CCode (cname = "icalproperty_new_defaultcharset", has_construct_function = false)]
		public icalproperty.defaultcharset (string v);
		[CCode (cname = "icalproperty_new_defaultlocale", has_construct_function = false)]
		public icalproperty.defaultlocale (string v);
		[CCode (cname = "icalproperty_new_defaulttzid", has_construct_function = false)]
		public icalproperty.defaulttzid (string v);
		[CCode (cname = "icalproperty_new_defaultvcars", has_construct_function = false)]
		public icalproperty.defaultvcars (string v);
		[CCode (cname = "icalproperty_new_deny", has_construct_function = false)]
		public icalproperty.deny (string v);
		[CCode (cname = "icalproperty_new_description", has_construct_function = false)]
		public icalproperty.description (string v);
		[CCode (cname = "icalproperty_new_dtend", has_construct_function = false)]
		public icalproperty.dtend (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_dtstamp", has_construct_function = false)]
		public icalproperty.dtstamp (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_dtstart", has_construct_function = false)]
		public icalproperty.dtstart (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_due", has_construct_function = false)]
		public icalproperty.due (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_duration", has_construct_function = false)]
		public icalproperty.duration (iCal.icaldurationtype v);
		[CCode (cname = "icalproperty_enum_belongs_to_property")]
		public static int enum_belongs_to_property (iCal.icalproperty_kind kind, int e);
		[CCode (cname = "icalproperty_enum_to_string")]
		public static unowned string enum_to_string (int e);
		[CCode (cname = "icalproperty_enum_to_string_r")]
		public string enum_to_string_r (int e);
		[CCode (cname = "icalproperty_new_exdate", has_construct_function = false)]
		public icalproperty.exdate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_expand", has_construct_function = false)]
		public icalproperty.expand (int v);
		[CCode (cname = "icalproperty_new_exrule", has_construct_function = false)]
		public icalproperty.exrule (iCal.icalrecurrencetype v);
		[CCode (cname = "icalproperty_new_freebusy", has_construct_function = false)]
		public icalproperty.freebusy (iCal.icalperiodtype v);
		[CCode (cname = "icalproperty_new_from_string", has_construct_function = false)]
		public icalproperty.from_string (string str);
		[CCode (cname = "icalproperty_new_geo", has_construct_function = false)]
		public icalproperty.geo (iCal.icalgeotype v);
		[CCode (cname = "icalproperty_get_action")]
		public iCal.icalproperty_action get_action ();
		[CCode (cname = "icalproperty_get_allowconflict")]
		public unowned string get_allowconflict ();
		[CCode (cname = "icalproperty_get_attach")]
		public unowned iCal.icalattach get_attach ();
		[CCode (cname = "icalproperty_get_attendee")]
		public unowned string get_attendee ();
		[CCode (cname = "icalproperty_get_calid")]
		public unowned string get_calid ();
		[CCode (cname = "icalproperty_get_calmaster")]
		public unowned string get_calmaster ();
		[CCode (cname = "icalproperty_get_calscale")]
		public unowned string get_calscale ();
		[CCode (cname = "icalproperty_get_capversion")]
		public unowned string get_capversion ();
		[CCode (cname = "icalproperty_get_carid")]
		public unowned string get_carid ();
		[CCode (cname = "icalproperty_get_carlevel")]
		public iCal.icalproperty_carlevel get_carlevel ();
		[CCode (cname = "icalproperty_get_categories")]
		public unowned string get_categories ();
		[CCode (cname = "icalproperty_get_class")]
		public iCal.icalproperty_class get_class ();
		[CCode (cname = "icalproperty_get_cmd")]
		public iCal.icalproperty_cmd get_cmd ();
		[CCode (cname = "icalproperty_get_comment")]
		public unowned string get_comment ();
		[CCode (cname = "icalproperty_get_completed")]
		public iCal.icaltimetype get_completed ();
		[CCode (cname = "icalproperty_get_components")]
		public unowned string get_components ();
		[CCode (cname = "icalproperty_get_contact")]
		public unowned string get_contact ();
		[CCode (cname = "icalproperty_get_created")]
		public iCal.icaltimetype get_created ();
		[CCode (cname = "icalproperty_get_csid")]
		public unowned string get_csid ();
		[CCode (cname = "icalproperty_get_datemax")]
		public iCal.icaltimetype get_datemax ();
		[CCode (cname = "icalproperty_get_datemin")]
		public iCal.icaltimetype get_datemin ();
		[CCode (cname = "icalproperty_get_decreed")]
		public unowned string get_decreed ();
		[CCode (cname = "icalproperty_get_defaultcharset")]
		public unowned string get_defaultcharset ();
		[CCode (cname = "icalproperty_get_defaultlocale")]
		public unowned string get_defaultlocale ();
		[CCode (cname = "icalproperty_get_defaulttzid")]
		public unowned string get_defaulttzid ();
		[CCode (cname = "icalproperty_get_defaultvcars")]
		public unowned string get_defaultvcars ();
		[CCode (cname = "icalproperty_get_deny")]
		public unowned string get_deny ();
		[CCode (cname = "icalproperty_get_description")]
		public unowned string get_description ();
		[CCode (cname = "icalproperty_get_dtend")]
		public iCal.icaltimetype get_dtend ();
		[CCode (cname = "icalproperty_get_dtstamp")]
		public iCal.icaltimetype get_dtstamp ();
		[CCode (cname = "icalproperty_get_dtstart")]
		public iCal.icaltimetype get_dtstart ();
		[CCode (cname = "icalproperty_get_due")]
		public iCal.icaltimetype get_due ();
		[CCode (cname = "icalproperty_get_duration")]
		public unowned iCal.icaldurationtype get_duration ();
		[CCode (cname = "icalproperty_get_exdate")]
		public iCal.icaltimetype get_exdate ();
		[CCode (cname = "icalproperty_get_expand")]
		public int get_expand ();
		[CCode (cname = "icalproperty_get_exrule")]
		public iCal.icalrecurrencetype get_exrule ();
		[CCode (cname = "icalproperty_get_first_parameter")]
		public unowned iCal.icalparameter get_first_parameter (iCal.icalparameter_kind kind);
		[CCode (cname = "icalproperty_get_freebusy")]
		public iCal.icalperiodtype get_freebusy ();
		[CCode (cname = "icalproperty_get_geo")]
		public iCal.icalgeotype get_geo ();
		[CCode (cname = "icalproperty_get_grant")]
		public unowned string get_grant ();
		[CCode (cname = "icalproperty_get_itipversion")]
		public unowned string get_itipversion ();
		[CCode (cname = "icalproperty_get_lastmodified")]
		public iCal.icaltimetype get_lastmodified ();
		[CCode (cname = "icalproperty_get_location")]
		public unowned string get_location ();
		[CCode (cname = "icalproperty_get_maxcomponentsize")]
		public int get_maxcomponentsize ();
		[CCode (cname = "icalproperty_get_maxdate")]
		public iCal.icaltimetype get_maxdate ();
		[CCode (cname = "icalproperty_get_maxresults")]
		public int get_maxresults ();
		[CCode (cname = "icalproperty_get_maxresultssize")]
		public int get_maxresultssize ();
		[CCode (cname = "icalproperty_get_method")]
		public iCal.icalproperty_method get_method ();
		[CCode (cname = "icalproperty_get_mindate")]
		public iCal.icaltimetype get_mindate ();
		[CCode (cname = "icalproperty_get_multipart")]
		public unowned string get_multipart ();
		[CCode (cname = "icalproperty_get_name")]
		public unowned string get_name ();
		[CCode (cname = "icalproperty_get_next_parameter")]
		public unowned iCal.icalparameter get_next_parameter (iCal.icalparameter_kind kind);
		[CCode (cname = "icalproperty_get_organizer")]
		public unowned string get_organizer ();
		[CCode (cname = "icalproperty_get_owner")]
		public unowned string get_owner ();
		[CCode (cname = "icalproperty_get_parameter_as_string")]
		public unowned string get_parameter_as_string (string name);
		[CCode (cname = "icalproperty_get_parameter_as_string_r")]
		public string get_parameter_as_string_r (string name);
		[CCode (cname = "icalproperty_get_percentcomplete")]
		public int get_percentcomplete ();
		[CCode (cname = "icalproperty_get_permission")]
		public unowned string get_permission ();
		[CCode (cname = "icalproperty_get_priority")]
		public int get_priority ();
		[CCode (cname = "icalproperty_get_prodid")]
		public unowned string get_prodid ();
		[CCode (cname = "icalproperty_get_property_name")]
		public unowned string get_property_name ();
		[CCode (cname = "icalproperty_get_property_name_r")]
		public string get_property_name_r ();
		[CCode (cname = "icalproperty_get_query")]
		public unowned string get_query ();
		[CCode (cname = "icalproperty_get_queryid")]
		public unowned string get_queryid ();
		[CCode (cname = "icalproperty_get_querylevel")]
		public iCal.icalproperty_querylevel get_querylevel ();
		[CCode (cname = "icalproperty_get_queryname")]
		public unowned string get_queryname ();
		[CCode (cname = "icalproperty_get_rdate")]
		public iCal.icaldatetimeperiodtype get_rdate ();
		[CCode (cname = "icalproperty_get_recuraccepted")]
		public unowned string get_recuraccepted ();
		[CCode (cname = "icalproperty_get_recurexpand")]
		public unowned string get_recurexpand ();
		[CCode (cname = "icalproperty_get_recurlimit")]
		public unowned string get_recurlimit ();
		[CCode (cname = "icalproperty_get_recurrenceid")]
		public iCal.icaltimetype get_recurrenceid ();
		[CCode (cname = "icalproperty_get_relatedto")]
		public unowned string get_relatedto ();
		[CCode (cname = "icalproperty_get_relcalid")]
		public unowned string get_relcalid ();
		[CCode (cname = "icalproperty_get_repeat")]
		public int get_repeat ();
		[CCode (cname = "icalproperty_get_requeststatus")]
		public iCal.icalreqstattype get_requeststatus ();
		[CCode (cname = "icalproperty_get_resources")]
		public unowned string get_resources ();
		[CCode (cname = "icalproperty_get_restriction")]
		public unowned string get_restriction ();
		[CCode (cname = "icalproperty_get_rrule")]
		public iCal.icalrecurrencetype get_rrule ();
		[CCode (cname = "icalproperty_get_scope")]
		public unowned string get_scope ();
		[CCode (cname = "icalproperty_get_sequence")]
		public int get_sequence ();
		[CCode (cname = "icalproperty_get_status")]
		public iCal.icalproperty_status get_status ();
		[CCode (cname = "icalproperty_get_storesexpanded")]
		public unowned string get_storesexpanded ();
		[CCode (cname = "icalproperty_get_summary")]
		public unowned string get_summary ();
		[CCode (cname = "icalproperty_get_target")]
		public unowned string get_target ();
		[CCode (cname = "icalproperty_get_transp")]
		public iCal.icalproperty_transp get_transp ();
		[CCode (cname = "icalproperty_get_trigger")]
		public iCal.icaltriggertype get_trigger ();
		[CCode (cname = "icalproperty_get_tzid")]
		public unowned string get_tzid ();
		[CCode (cname = "icalproperty_get_tzname")]
		public unowned string get_tzname ();
		[CCode (cname = "icalproperty_get_tzoffsetfrom")]
		public int get_tzoffsetfrom ();
		[CCode (cname = "icalproperty_get_tzoffsetto")]
		public int get_tzoffsetto ();
		[CCode (cname = "icalproperty_get_tzurl")]
		public unowned string get_tzurl ();
		[CCode (cname = "icalproperty_get_uid")]
		public unowned string get_uid ();
		[CCode (cname = "icalproperty_get_url")]
		public unowned string get_url ();
		[CCode (cname = "icalproperty_get_value")]
		public unowned iCal.icalvalue get_value ();
		[CCode (cname = "icalproperty_get_value_as_string")]
		public unowned string get_value_as_string ();
		[CCode (cname = "icalproperty_get_value_as_string_r")]
		public string get_value_as_string_r ();
		[CCode (cname = "icalproperty_get_version")]
		public unowned string get_version ();
		[CCode (cname = "icalproperty_get_x")]
		public unowned string get_x ();
		[CCode (cname = "icalproperty_get_x_name")]
		public unowned string get_x_name ();
		[CCode (cname = "icalproperty_get_xlicclass")]
		public iCal.icalproperty_xlicclass get_xlicclass ();
		[CCode (cname = "icalproperty_get_xlicclustercount")]
		public unowned string get_xlicclustercount ();
		[CCode (cname = "icalproperty_get_xlicerror")]
		public unowned string get_xlicerror ();
		[CCode (cname = "icalproperty_get_xlicmimecharset")]
		public unowned string get_xlicmimecharset ();
		[CCode (cname = "icalproperty_get_xlicmimecid")]
		public unowned string get_xlicmimecid ();
		[CCode (cname = "icalproperty_get_xlicmimecontenttype")]
		public unowned string get_xlicmimecontenttype ();
		[CCode (cname = "icalproperty_get_xlicmimeencoding")]
		public unowned string get_xlicmimeencoding ();
		[CCode (cname = "icalproperty_get_xlicmimefilename")]
		public unowned string get_xlicmimefilename ();
		[CCode (cname = "icalproperty_get_xlicmimeoptinfo")]
		public unowned string get_xlicmimeoptinfo ();
		[CCode (cname = "icalproperty_new_grant", has_construct_function = false)]
		public icalproperty.grant (string v);
		[CCode (cname = "icalproperty_isa")]
		public iCal.icalproperty_kind isa ();
		[CCode (cname = "icalproperty_isa_property")]
		public static int isa_property (void* property);
		[CCode (cname = "icalproperty_new_itipversion", has_construct_function = false)]
		public icalproperty.itipversion (string v);
		[CCode (cname = "icalproperty_kind_and_string_to_enum")]
		public static int kind_and_string_to_enum (int kind, string str);
		[CCode (cname = "icalproperty_kind_is_valid")]
		public static int kind_is_valid (iCal.icalproperty_kind kind);
		[CCode (cname = "icalproperty_kind_to_string")]
		public static unowned string kind_to_string (iCal.icalproperty_kind kind);
		[CCode (cname = "icalproperty_kind_to_value_kind")]
		public static iCal.icalvalue_kind kind_to_value_kind (iCal.icalproperty_kind kind);
		[CCode (cname = "icalproperty_new_lastmodified", has_construct_function = false)]
		public icalproperty.lastmodified (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_location", has_construct_function = false)]
		public icalproperty.location (string v);
		[CCode (cname = "icalproperty_new_maxcomponentsize", has_construct_function = false)]
		public icalproperty.maxcomponentsize (int v);
		[CCode (cname = "icalproperty_new_maxdate", has_construct_function = false)]
		public icalproperty.maxdate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_maxresults", has_construct_function = false)]
		public icalproperty.maxresults (int v);
		[CCode (cname = "icalproperty_new_maxresultssize", has_construct_function = false)]
		public icalproperty.maxresultssize (int v);
		[CCode (cname = "icalproperty_new_method", has_construct_function = false)]
		public icalproperty.method (iCal.icalproperty_method v);
		[CCode (cname = "icalproperty_method_to_string")]
		public static unowned string method_to_string (iCal.icalproperty_method method);
		[CCode (cname = "icalproperty_new_mindate", has_construct_function = false)]
		public icalproperty.mindate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_multipart", has_construct_function = false)]
		public icalproperty.multipart (string v);
		[CCode (cname = "icalproperty_new_name", has_construct_function = false)]
		public icalproperty.name (string v);
		[CCode (cname = "icalproperty_new_organizer", has_construct_function = false)]
		public icalproperty.organizer (string v);
		[CCode (cname = "icalproperty_new_owner", has_construct_function = false)]
		public icalproperty.owner (string v);
		[CCode (cname = "icalproperty_new_percentcomplete", has_construct_function = false)]
		public icalproperty.percentcomplete (int v);
		[CCode (cname = "icalproperty_new_permission", has_construct_function = false)]
		public icalproperty.permission (string v);
		[CCode (cname = "icalproperty_new_priority", has_construct_function = false)]
		public icalproperty.priority (int v);
		[CCode (cname = "icalproperty_new_prodid", has_construct_function = false)]
		public icalproperty.prodid (string v);
		[CCode (cname = "icalproperty_new_query", has_construct_function = false)]
		public icalproperty.query (string v);
		[CCode (cname = "icalproperty_new_queryid", has_construct_function = false)]
		public icalproperty.queryid (string v);
		[CCode (cname = "icalproperty_new_querylevel", has_construct_function = false)]
		public icalproperty.querylevel (iCal.icalproperty_querylevel v);
		[CCode (cname = "icalproperty_new_queryname", has_construct_function = false)]
		public icalproperty.queryname (string v);
		[CCode (cname = "icalproperty_new_rdate", has_construct_function = false)]
		public icalproperty.rdate (iCal.icaldatetimeperiodtype v);
		[CCode (cname = "icalproperty_new_recuraccepted", has_construct_function = false)]
		public icalproperty.recuraccepted (string v);
		[CCode (cname = "icalproperty_new_recurexpand", has_construct_function = false)]
		public icalproperty.recurexpand (string v);
		[CCode (cname = "icalproperty_new_recurlimit", has_construct_function = false)]
		public icalproperty.recurlimit (string v);
		[CCode (cname = "icalproperty_recurrence_is_excluded")]
		public static int recurrence_is_excluded (iCal.icalcomponent comp, iCal.icaltimetype dtstart, iCal.icaltimetype recurtime);
		[CCode (cname = "icalproperty_new_recurrenceid", has_construct_function = false)]
		public icalproperty.recurrenceid (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_new_relatedto", has_construct_function = false)]
		public icalproperty.relatedto (string v);
		[CCode (cname = "icalproperty_new_relcalid", has_construct_function = false)]
		public icalproperty.relcalid (string v);
		[CCode (cname = "icalproperty_remove_parameter")]
		public void remove_parameter (iCal.icalparameter_kind kind);
		[CCode (cname = "icalproperty_remove_parameter_by_kind")]
		public void remove_parameter_by_kind (iCal.icalparameter_kind kind);
		[CCode (cname = "icalproperty_remove_parameter_by_name")]
		public void remove_parameter_by_name (string name);
		[CCode (cname = "icalproperty_remove_parameter_by_ref")]
		public void remove_parameter_by_ref (iCal.icalparameter param);
		[CCode (cname = "icalproperty_new_repeat", has_construct_function = false)]
		public icalproperty.repeat (int v);
		[CCode (cname = "icalproperty_new_requeststatus", has_construct_function = false)]
		public icalproperty.requeststatus (iCal.icalreqstattype v);
		[CCode (cname = "icalproperty_new_resources", has_construct_function = false)]
		public icalproperty.resources (string v);
		[CCode (cname = "icalproperty_new_restriction", has_construct_function = false)]
		public icalproperty.restriction (string v);
		[CCode (cname = "icalproperty_new_rrule", has_construct_function = false)]
		public icalproperty.rrule (iCal.icalrecurrencetype v);
		[CCode (cname = "icalproperty_new_scope", has_construct_function = false)]
		public icalproperty.scope (string v);
		[CCode (cname = "icalproperty_new_sequence", has_construct_function = false)]
		public icalproperty.sequence (int v);
		[CCode (cname = "icalproperty_set_action")]
		public void set_action (iCal.icalproperty_action v);
		[CCode (cname = "icalproperty_set_allowconflict")]
		public void set_allowconflict (string v);
		[CCode (cname = "icalproperty_set_attach")]
		public void set_attach (iCal.icalattach v);
		[CCode (cname = "icalproperty_set_attendee")]
		public void set_attendee (string v);
		[CCode (cname = "icalproperty_set_calid")]
		public void set_calid (string v);
		[CCode (cname = "icalproperty_set_calmaster")]
		public void set_calmaster (string v);
		[CCode (cname = "icalproperty_set_calscale")]
		public void set_calscale (string v);
		[CCode (cname = "icalproperty_set_capversion")]
		public void set_capversion (string v);
		[CCode (cname = "icalproperty_set_carid")]
		public void set_carid (string v);
		[CCode (cname = "icalproperty_set_carlevel")]
		public void set_carlevel (iCal.icalproperty_carlevel v);
		[CCode (cname = "icalproperty_set_categories")]
		public void set_categories (string v);
		[CCode (cname = "icalproperty_set_class")]
		public void set_class (iCal.icalproperty_class v);
		[CCode (cname = "icalproperty_set_cmd")]
		public void set_cmd (iCal.icalproperty_cmd v);
		[CCode (cname = "icalproperty_set_comment")]
		public void set_comment (string v);
		[CCode (cname = "icalproperty_set_completed")]
		public void set_completed (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_components")]
		public void set_components (string v);
		[CCode (cname = "icalproperty_set_contact")]
		public void set_contact (string v);
		[CCode (cname = "icalproperty_set_created")]
		public void set_created (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_csid")]
		public void set_csid (string v);
		[CCode (cname = "icalproperty_set_datemax")]
		public void set_datemax (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_datemin")]
		public void set_datemin (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_decreed")]
		public void set_decreed (string v);
		[CCode (cname = "icalproperty_set_defaultcharset")]
		public void set_defaultcharset (string v);
		[CCode (cname = "icalproperty_set_defaultlocale")]
		public void set_defaultlocale (string v);
		[CCode (cname = "icalproperty_set_defaulttzid")]
		public void set_defaulttzid (string v);
		[CCode (cname = "icalproperty_set_defaultvcars")]
		public void set_defaultvcars (string v);
		[CCode (cname = "icalproperty_set_deny")]
		public void set_deny (string v);
		[CCode (cname = "icalproperty_set_description")]
		public void set_description (string v);
		[CCode (cname = "icalproperty_set_dtend")]
		public void set_dtend (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_dtstamp")]
		public void set_dtstamp (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_dtstart")]
		public void set_dtstart (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_due")]
		public void set_due (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_duration")]
		public void set_duration (iCal.icaldurationtype v);
		[CCode (cname = "icalproperty_set_exdate")]
		public void set_exdate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_expand")]
		public void set_expand (int v);
		[CCode (cname = "icalproperty_set_exrule")]
		public void set_exrule (iCal.icalrecurrencetype v);
		[CCode (cname = "icalproperty_set_freebusy")]
		public void set_freebusy (iCal.icalperiodtype v);
		[CCode (cname = "icalproperty_set_geo")]
		public void set_geo (iCal.icalgeotype v);
		[CCode (cname = "icalproperty_set_grant")]
		public void set_grant (string v);
		[CCode (cname = "icalproperty_set_itipversion")]
		public void set_itipversion (string v);
		[CCode (cname = "icalproperty_set_lastmodified")]
		public void set_lastmodified (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_location")]
		public void set_location (string v);
		[CCode (cname = "icalproperty_set_maxcomponentsize")]
		public void set_maxcomponentsize (int v);
		[CCode (cname = "icalproperty_set_maxdate")]
		public void set_maxdate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_maxresults")]
		public void set_maxresults (int v);
		[CCode (cname = "icalproperty_set_maxresultssize")]
		public void set_maxresultssize (int v);
		[CCode (cname = "icalproperty_set_method")]
		public void set_method (iCal.icalproperty_method v);
		[CCode (cname = "icalproperty_set_mindate")]
		public void set_mindate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_multipart")]
		public void set_multipart (string v);
		[CCode (cname = "icalproperty_set_name")]
		public void set_name (string v);
		[CCode (cname = "icalproperty_set_organizer")]
		public void set_organizer (string v);
		[CCode (cname = "icalproperty_set_owner")]
		public void set_owner (string v);
		[CCode (cname = "icalproperty_set_parameter")]
		public void set_parameter (iCal.icalparameter parameter);
		[CCode (cname = "icalproperty_set_parameter_from_string")]
		public void set_parameter_from_string (string name, string value);
		[CCode (cname = "icalproperty_set_percentcomplete")]
		public void set_percentcomplete (int v);
		[CCode (cname = "icalproperty_set_permission")]
		public void set_permission (string v);
		[CCode (cname = "icalproperty_set_priority")]
		public void set_priority (int v);
		[CCode (cname = "icalproperty_set_prodid")]
		public void set_prodid (string v);
		[CCode (cname = "icalproperty_set_query")]
		public void set_query (string v);
		[CCode (cname = "icalproperty_set_queryid")]
		public void set_queryid (string v);
		[CCode (cname = "icalproperty_set_querylevel")]
		public void set_querylevel (iCal.icalproperty_querylevel v);
		[CCode (cname = "icalproperty_set_queryname")]
		public void set_queryname (string v);
		[CCode (cname = "icalproperty_set_rdate")]
		public void set_rdate (iCal.icaldatetimeperiodtype v);
		[CCode (cname = "icalproperty_set_recuraccepted")]
		public void set_recuraccepted (string v);
		[CCode (cname = "icalproperty_set_recurexpand")]
		public void set_recurexpand (string v);
		[CCode (cname = "icalproperty_set_recurlimit")]
		public void set_recurlimit (string v);
		[CCode (cname = "icalproperty_set_recurrenceid")]
		public void set_recurrenceid (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_set_relatedto")]
		public void set_relatedto (string v);
		[CCode (cname = "icalproperty_set_relcalid")]
		public void set_relcalid (string v);
		[CCode (cname = "icalproperty_set_repeat")]
		public void set_repeat (int v);
		[CCode (cname = "icalproperty_set_requeststatus")]
		public void set_requeststatus (iCal.icalreqstattype v);
		[CCode (cname = "icalproperty_set_resources")]
		public void set_resources (string v);
		[CCode (cname = "icalproperty_set_restriction")]
		public void set_restriction (string v);
		[CCode (cname = "icalproperty_set_rrule")]
		public void set_rrule (iCal.icalrecurrencetype v);
		[CCode (cname = "icalproperty_set_scope")]
		public void set_scope (string v);
		[CCode (cname = "icalproperty_set_sequence")]
		public void set_sequence (int v);
		[CCode (cname = "icalproperty_set_status")]
		public void set_status (iCal.icalproperty_status v);
		[CCode (cname = "icalproperty_set_storesexpanded")]
		public void set_storesexpanded (string v);
		[CCode (cname = "icalproperty_set_summary")]
		public void set_summary (string v);
		[CCode (cname = "icalproperty_set_target")]
		public void set_target (string v);
		[CCode (cname = "icalproperty_set_transp")]
		public void set_transp (iCal.icalproperty_transp v);
		[CCode (cname = "icalproperty_set_trigger")]
		public void set_trigger (iCal.icaltriggertype v);
		[CCode (cname = "icalproperty_set_tzid")]
		public void set_tzid (string v);
		[CCode (cname = "icalproperty_set_tzname")]
		public void set_tzname (string v);
		[CCode (cname = "icalproperty_set_tzoffsetfrom")]
		public void set_tzoffsetfrom (int v);
		[CCode (cname = "icalproperty_set_tzoffsetto")]
		public void set_tzoffsetto (int v);
		[CCode (cname = "icalproperty_set_tzurl")]
		public void set_tzurl (string v);
		[CCode (cname = "icalproperty_set_uid")]
		public void set_uid (string v);
		[CCode (cname = "icalproperty_set_url")]
		public void set_url (string v);
		[CCode (cname = "icalproperty_set_value")]
		public void set_value (iCal.icalvalue value);
		[CCode (cname = "icalproperty_set_value_from_string")]
		public void set_value_from_string (string value, string kind);
		[CCode (cname = "icalproperty_set_version")]
		public void set_version (string v);
		[CCode (cname = "icalproperty_set_x")]
		public void set_x (string v);
		[CCode (cname = "icalproperty_set_x_name")]
		public void set_x_name (string name);
		[CCode (cname = "icalproperty_set_xlicclass")]
		public void set_xlicclass (iCal.icalproperty_xlicclass v);
		[CCode (cname = "icalproperty_set_xlicclustercount")]
		public void set_xlicclustercount (string v);
		[CCode (cname = "icalproperty_set_xlicerror")]
		public void set_xlicerror (string v);
		[CCode (cname = "icalproperty_set_xlicmimecharset")]
		public void set_xlicmimecharset (string v);
		[CCode (cname = "icalproperty_set_xlicmimecid")]
		public void set_xlicmimecid (string v);
		[CCode (cname = "icalproperty_set_xlicmimecontenttype")]
		public void set_xlicmimecontenttype (string v);
		[CCode (cname = "icalproperty_set_xlicmimeencoding")]
		public void set_xlicmimeencoding (string v);
		[CCode (cname = "icalproperty_set_xlicmimefilename")]
		public void set_xlicmimefilename (string v);
		[CCode (cname = "icalproperty_set_xlicmimeoptinfo")]
		public void set_xlicmimeoptinfo (string v);
		[CCode (cname = "icalproperty_new_status", has_construct_function = false)]
		public icalproperty.status (iCal.icalproperty_status v);
		[CCode (cname = "icalproperty_status_to_string")]
		public static unowned string status_to_string (iCal.icalproperty_status p1);
		[CCode (cname = "icalproperty_new_storesexpanded", has_construct_function = false)]
		public icalproperty.storesexpanded (string v);
		[CCode (cname = "icalproperty_string_to_enum")]
		public static int string_to_enum (string str);
		[CCode (cname = "icalproperty_string_to_kind")]
		public static iCal.icalproperty_kind string_to_kind (string str);
		[CCode (cname = "icalproperty_string_to_method")]
		public static iCal.icalproperty_method string_to_method (string str);
		[CCode (cname = "icalproperty_string_to_status")]
		public static iCal.icalproperty_status string_to_status (string str);
		[CCode (cname = "icalproperty_new_summary", has_construct_function = false)]
		public icalproperty.summary (string v);
		[CCode (cname = "icalproperty_new_target", has_construct_function = false)]
		public icalproperty.target (string v);
		[CCode (cname = "icalproperty_new_transp", has_construct_function = false)]
		public icalproperty.transp (iCal.icalproperty_transp v);
		[CCode (cname = "icalproperty_new_trigger", has_construct_function = false)]
		public icalproperty.trigger (iCal.icaltriggertype v);
		[CCode (cname = "icalproperty_new_tzid", has_construct_function = false)]
		public icalproperty.tzid (string v);
		[CCode (cname = "icalproperty_new_tzname", has_construct_function = false)]
		public icalproperty.tzname (string v);
		[CCode (cname = "icalproperty_new_tzoffsetfrom", has_construct_function = false)]
		public icalproperty.tzoffsetfrom (int v);
		[CCode (cname = "icalproperty_new_tzoffsetto", has_construct_function = false)]
		public icalproperty.tzoffsetto (int v);
		[CCode (cname = "icalproperty_new_tzurl", has_construct_function = false)]
		public icalproperty.tzurl (string v);
		[CCode (cname = "icalproperty_new_uid", has_construct_function = false)]
		public icalproperty.uid (string v);
		[CCode (cname = "icalproperty_new_url", has_construct_function = false)]
		public icalproperty.url (string v);
		[CCode (cname = "icalproperty_value_kind_to_kind")]
		public static iCal.icalproperty_kind value_kind_to_kind (iCal.icalvalue_kind kind);
		[CCode (cname = "icalproperty_vanew_action")]
		public static unowned iCal.icalproperty vanew_action (iCal.icalproperty_action v);
		[CCode (cname = "icalproperty_vanew_allowconflict")]
		public static unowned iCal.icalproperty vanew_allowconflict (string v);
		[CCode (cname = "icalproperty_vanew_attach")]
		public static unowned iCal.icalproperty vanew_attach (iCal.icalattach v);
		[CCode (cname = "icalproperty_vanew_attendee")]
		public static unowned iCal.icalproperty vanew_attendee (string v);
		[CCode (cname = "icalproperty_vanew_calid")]
		public static unowned iCal.icalproperty vanew_calid (string v);
		[CCode (cname = "icalproperty_vanew_calmaster")]
		public static unowned iCal.icalproperty vanew_calmaster (string v);
		[CCode (cname = "icalproperty_vanew_calscale")]
		public static unowned iCal.icalproperty vanew_calscale (string v);
		[CCode (cname = "icalproperty_vanew_capversion")]
		public static unowned iCal.icalproperty vanew_capversion (string v);
		[CCode (cname = "icalproperty_vanew_carid")]
		public static unowned iCal.icalproperty vanew_carid (string v);
		[CCode (cname = "icalproperty_vanew_carlevel")]
		public static unowned iCal.icalproperty vanew_carlevel (iCal.icalproperty_carlevel v);
		[CCode (cname = "icalproperty_vanew_categories")]
		public static unowned iCal.icalproperty vanew_categories (string v);
		[CCode (cname = "icalproperty_vanew_class")]
		public static unowned iCal.icalproperty vanew_class (iCal.icalproperty_class v);
		[CCode (cname = "icalproperty_vanew_cmd")]
		public static unowned iCal.icalproperty vanew_cmd (iCal.icalproperty_cmd v);
		[CCode (cname = "icalproperty_vanew_comment")]
		public static unowned iCal.icalproperty vanew_comment (string v);
		[CCode (cname = "icalproperty_vanew_completed")]
		public static unowned iCal.icalproperty vanew_completed (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_components")]
		public static unowned iCal.icalproperty vanew_components (string v);
		[CCode (cname = "icalproperty_vanew_contact")]
		public static unowned iCal.icalproperty vanew_contact (string v);
		[CCode (cname = "icalproperty_vanew_created")]
		public static unowned iCal.icalproperty vanew_created (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_csid")]
		public static unowned iCal.icalproperty vanew_csid (string v);
		[CCode (cname = "icalproperty_vanew_datemax")]
		public static unowned iCal.icalproperty vanew_datemax (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_datemin")]
		public static unowned iCal.icalproperty vanew_datemin (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_decreed")]
		public static unowned iCal.icalproperty vanew_decreed (string v);
		[CCode (cname = "icalproperty_vanew_defaultcharset")]
		public static unowned iCal.icalproperty vanew_defaultcharset (string v);
		[CCode (cname = "icalproperty_vanew_defaultlocale")]
		public static unowned iCal.icalproperty vanew_defaultlocale (string v);
		[CCode (cname = "icalproperty_vanew_defaulttzid")]
		public static unowned iCal.icalproperty vanew_defaulttzid (string v);
		[CCode (cname = "icalproperty_vanew_defaultvcars")]
		public static unowned iCal.icalproperty vanew_defaultvcars (string v);
		[CCode (cname = "icalproperty_vanew_deny")]
		public static unowned iCal.icalproperty vanew_deny (string v);
		[CCode (cname = "icalproperty_vanew_description")]
		public static unowned iCal.icalproperty vanew_description (string v);
		[CCode (cname = "icalproperty_vanew_dtend")]
		public static unowned iCal.icalproperty vanew_dtend (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_dtstamp")]
		public static unowned iCal.icalproperty vanew_dtstamp (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_dtstart")]
		public static unowned iCal.icalproperty vanew_dtstart (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_due")]
		public static unowned iCal.icalproperty vanew_due (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_duration")]
		public static unowned iCal.icalproperty vanew_duration (iCal.icaldurationtype v);
		[CCode (cname = "icalproperty_vanew_exdate")]
		public static unowned iCal.icalproperty vanew_exdate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_expand")]
		public static unowned iCal.icalproperty vanew_expand (int v);
		[CCode (cname = "icalproperty_vanew_exrule")]
		public static unowned iCal.icalproperty vanew_exrule (iCal.icalrecurrencetype v);
		[CCode (cname = "icalproperty_vanew_freebusy")]
		public static unowned iCal.icalproperty vanew_freebusy (iCal.icalperiodtype v);
		[CCode (cname = "icalproperty_vanew_geo")]
		public static unowned iCal.icalproperty vanew_geo (iCal.icalgeotype v);
		[CCode (cname = "icalproperty_vanew_grant")]
		public static unowned iCal.icalproperty vanew_grant (string v);
		[CCode (cname = "icalproperty_vanew_itipversion")]
		public static unowned iCal.icalproperty vanew_itipversion (string v);
		[CCode (cname = "icalproperty_vanew_lastmodified")]
		public static unowned iCal.icalproperty vanew_lastmodified (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_location")]
		public static unowned iCal.icalproperty vanew_location (string v);
		[CCode (cname = "icalproperty_vanew_maxcomponentsize")]
		public static unowned iCal.icalproperty vanew_maxcomponentsize (int v);
		[CCode (cname = "icalproperty_vanew_maxdate")]
		public static unowned iCal.icalproperty vanew_maxdate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_maxresults")]
		public static unowned iCal.icalproperty vanew_maxresults (int v);
		[CCode (cname = "icalproperty_vanew_maxresultssize")]
		public static unowned iCal.icalproperty vanew_maxresultssize (int v);
		[CCode (cname = "icalproperty_vanew_method")]
		public static unowned iCal.icalproperty vanew_method (iCal.icalproperty_method v);
		[CCode (cname = "icalproperty_vanew_mindate")]
		public static unowned iCal.icalproperty vanew_mindate (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_multipart")]
		public static unowned iCal.icalproperty vanew_multipart (string v);
		[CCode (cname = "icalproperty_vanew_name")]
		public static unowned iCal.icalproperty vanew_name (string v);
		[CCode (cname = "icalproperty_vanew_organizer")]
		public static unowned iCal.icalproperty vanew_organizer (string v);
		[CCode (cname = "icalproperty_vanew_owner")]
		public static unowned iCal.icalproperty vanew_owner (string v);
		[CCode (cname = "icalproperty_vanew_percentcomplete")]
		public static unowned iCal.icalproperty vanew_percentcomplete (int v);
		[CCode (cname = "icalproperty_vanew_permission")]
		public static unowned iCal.icalproperty vanew_permission (string v);
		[CCode (cname = "icalproperty_vanew_priority")]
		public static unowned iCal.icalproperty vanew_priority (int v);
		[CCode (cname = "icalproperty_vanew_prodid")]
		public static unowned iCal.icalproperty vanew_prodid (string v);
		[CCode (cname = "icalproperty_vanew_query")]
		public static unowned iCal.icalproperty vanew_query (string v);
		[CCode (cname = "icalproperty_vanew_queryid")]
		public static unowned iCal.icalproperty vanew_queryid (string v);
		[CCode (cname = "icalproperty_vanew_querylevel")]
		public static unowned iCal.icalproperty vanew_querylevel (iCal.icalproperty_querylevel v);
		[CCode (cname = "icalproperty_vanew_queryname")]
		public static unowned iCal.icalproperty vanew_queryname (string v);
		[CCode (cname = "icalproperty_vanew_rdate")]
		public static unowned iCal.icalproperty vanew_rdate (iCal.icaldatetimeperiodtype v);
		[CCode (cname = "icalproperty_vanew_recuraccepted")]
		public static unowned iCal.icalproperty vanew_recuraccepted (string v);
		[CCode (cname = "icalproperty_vanew_recurexpand")]
		public static unowned iCal.icalproperty vanew_recurexpand (string v);
		[CCode (cname = "icalproperty_vanew_recurlimit")]
		public static unowned iCal.icalproperty vanew_recurlimit (string v);
		[CCode (cname = "icalproperty_vanew_recurrenceid")]
		public static unowned iCal.icalproperty vanew_recurrenceid (iCal.icaltimetype v);
		[CCode (cname = "icalproperty_vanew_relatedto")]
		public static unowned iCal.icalproperty vanew_relatedto (string v);
		[CCode (cname = "icalproperty_vanew_relcalid")]
		public static unowned iCal.icalproperty vanew_relcalid (string v);
		[CCode (cname = "icalproperty_vanew_repeat")]
		public static unowned iCal.icalproperty vanew_repeat (int v);
		[CCode (cname = "icalproperty_vanew_requeststatus")]
		public static unowned iCal.icalproperty vanew_requeststatus (iCal.icalreqstattype v);
		[CCode (cname = "icalproperty_vanew_resources")]
		public static unowned iCal.icalproperty vanew_resources (string v);
		[CCode (cname = "icalproperty_vanew_restriction")]
		public static unowned iCal.icalproperty vanew_restriction (string v);
		[CCode (cname = "icalproperty_vanew_rrule")]
		public static unowned iCal.icalproperty vanew_rrule (iCal.icalrecurrencetype v);
		[CCode (cname = "icalproperty_vanew_scope")]
		public static unowned iCal.icalproperty vanew_scope (string v);
		[CCode (cname = "icalproperty_vanew_sequence")]
		public static unowned iCal.icalproperty vanew_sequence (int v);
		[CCode (cname = "icalproperty_vanew_status")]
		public static unowned iCal.icalproperty vanew_status (iCal.icalproperty_status v);
		[CCode (cname = "icalproperty_vanew_storesexpanded")]
		public static unowned iCal.icalproperty vanew_storesexpanded (string v);
		[CCode (cname = "icalproperty_vanew_summary")]
		public static unowned iCal.icalproperty vanew_summary (string v);
		[CCode (cname = "icalproperty_vanew_target")]
		public static unowned iCal.icalproperty vanew_target (string v);
		[CCode (cname = "icalproperty_vanew_transp")]
		public static unowned iCal.icalproperty vanew_transp (iCal.icalproperty_transp v);
		[CCode (cname = "icalproperty_vanew_trigger")]
		public static unowned iCal.icalproperty vanew_trigger (iCal.icaltriggertype v);
		[CCode (cname = "icalproperty_vanew_tzid")]
		public static unowned iCal.icalproperty vanew_tzid (string v);
		[CCode (cname = "icalproperty_vanew_tzname")]
		public static unowned iCal.icalproperty vanew_tzname (string v);
		[CCode (cname = "icalproperty_vanew_tzoffsetfrom")]
		public static unowned iCal.icalproperty vanew_tzoffsetfrom (int v);
		[CCode (cname = "icalproperty_vanew_tzoffsetto")]
		public static unowned iCal.icalproperty vanew_tzoffsetto (int v);
		[CCode (cname = "icalproperty_vanew_tzurl")]
		public static unowned iCal.icalproperty vanew_tzurl (string v);
		[CCode (cname = "icalproperty_vanew_uid")]
		public static unowned iCal.icalproperty vanew_uid (string v);
		[CCode (cname = "icalproperty_vanew_url")]
		public static unowned iCal.icalproperty vanew_url (string v);
		[CCode (cname = "icalproperty_vanew_version")]
		public static unowned iCal.icalproperty vanew_version (string v);
		[CCode (cname = "icalproperty_vanew_x")]
		public static unowned iCal.icalproperty vanew_x (string v);
		[CCode (cname = "icalproperty_vanew_xlicclass")]
		public static unowned iCal.icalproperty vanew_xlicclass (iCal.icalproperty_xlicclass v);
		[CCode (cname = "icalproperty_vanew_xlicclustercount")]
		public static unowned iCal.icalproperty vanew_xlicclustercount (string v);
		[CCode (cname = "icalproperty_vanew_xlicerror")]
		public static unowned iCal.icalproperty vanew_xlicerror (string v);
		[CCode (cname = "icalproperty_vanew_xlicmimecharset")]
		public static unowned iCal.icalproperty vanew_xlicmimecharset (string v);
		[CCode (cname = "icalproperty_vanew_xlicmimecid")]
		public static unowned iCal.icalproperty vanew_xlicmimecid (string v);
		[CCode (cname = "icalproperty_vanew_xlicmimecontenttype")]
		public static unowned iCal.icalproperty vanew_xlicmimecontenttype (string v);
		[CCode (cname = "icalproperty_vanew_xlicmimeencoding")]
		public static unowned iCal.icalproperty vanew_xlicmimeencoding (string v);
		[CCode (cname = "icalproperty_vanew_xlicmimefilename")]
		public static unowned iCal.icalproperty vanew_xlicmimefilename (string v);
		[CCode (cname = "icalproperty_vanew_xlicmimeoptinfo")]
		public static unowned iCal.icalproperty vanew_xlicmimeoptinfo (string v);
		[CCode (cname = "icalproperty_new_version", has_construct_function = false)]
		public icalproperty.version (string v);
		[CCode (cname = "icalproperty_new_x", has_construct_function = false)]
		public icalproperty.x (string v);
		[CCode (cname = "icalproperty_new_xlicclass", has_construct_function = false)]
		public icalproperty.xlicclass (iCal.icalproperty_xlicclass v);
		[CCode (cname = "icalproperty_new_xlicclustercount", has_construct_function = false)]
		public icalproperty.xlicclustercount (string v);
		[CCode (cname = "icalproperty_new_xlicerror", has_construct_function = false)]
		public icalproperty.xlicerror (string v);
		[CCode (cname = "icalproperty_new_xlicmimecharset", has_construct_function = false)]
		public icalproperty.xlicmimecharset (string v);
		[CCode (cname = "icalproperty_new_xlicmimecid", has_construct_function = false)]
		public icalproperty.xlicmimecid (string v);
		[CCode (cname = "icalproperty_new_xlicmimecontenttype", has_construct_function = false)]
		public icalproperty.xlicmimecontenttype (string v);
		[CCode (cname = "icalproperty_new_xlicmimeencoding", has_construct_function = false)]
		public icalproperty.xlicmimeencoding (string v);
		[CCode (cname = "icalproperty_new_xlicmimefilename", has_construct_function = false)]
		public icalproperty.xlicmimefilename (string v);
		[CCode (cname = "icalproperty_new_xlicmimeoptinfo", has_construct_function = false)]
		public icalproperty.xlicmimeoptinfo (string v);
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class icalrecur_iterator {
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class icaltime_span {
		public ulong end;
		public int is_busy;
		public ulong start;
	}
	[CCode (cheader_filename = "libical/ical.h", copy_function = "icaltimezone_copy", free_function = "icaltimezone_free")]
	[Compact]
	public class icaltimezone {
		[CCode (cname = "icaltimezone_new", has_construct_function = false)]
		public icaltimezone ();
		[CCode (cname = "icaltimezone_array_append_from_vtimezone")]
		public static void array_append_from_vtimezone (iCal.icalarray timezones, iCal.icalcomponent child);
		[CCode (cname = "icaltimezone_array_free")]
		public static void array_free (iCal.icalarray timezones);
		[CCode (cname = "icaltimezone_array_new")]
		public static unowned iCal.icalarray array_new ();
		[CCode (cname = "icaltimezone_convert_time")]
		public static void convert_time (iCal.icaltimetype tt, iCal.icaltimezone from_zone, iCal.icaltimezone to_zone);
		[CCode (cname = "icaltimezone_copy")]
		public unowned iCal.icaltimezone copy ();
		[CCode (cname = "icaltimezone_dump_changes")]
		public int dump_changes (int max_year, GLib.FileStream fp);
		[CCode (cname = "icaltimezone_free_builtin_timezones")]
		public static void free_builtin_timezones ();
		[CCode (cname = "icaltimezone_get_builtin_timezone")]
		public static unowned iCal.icaltimezone get_builtin_timezone (string location);
		[CCode (cname = "icaltimezone_get_builtin_timezone_from_offset")]
		public static unowned iCal.icaltimezone get_builtin_timezone_from_offset (int offset, string tzname);
		[CCode (cname = "icaltimezone_get_builtin_timezone_from_tzid")]
		public static unowned iCal.icaltimezone? get_builtin_timezone_from_tzid (string tzid);
		[CCode (cname = "icaltimezone_get_builtin_timezones")]
		public static unowned iCal.icalarray get_builtin_timezones ();
		[CCode (cname = "icaltimezone_get_component")]
		public unowned iCal.icalcomponent get_component ();
		[CCode (cname = "icaltimezone_get_display_name")]
		public unowned string get_display_name ();
		[CCode (cname = "icaltimezone_get_latitude")]
		public double get_latitude ();
		[CCode (cname = "icaltimezone_get_location")]
		public unowned string get_location ();
		[CCode (cname = "icaltimezone_get_longitude")]
		public double get_longitude ();
		[CCode (cname = "icaltimezone_get_tzid")]
		public unowned string get_tzid ();
		[CCode (cname = "icaltimezone_get_tznames")]
		public unowned string get_tznames ();
		[CCode (cname = "icaltimezone_get_utc_offset")]
		public int get_utc_offset (iCal.icaltimetype tt, int is_daylight);
		[CCode (cname = "icaltimezone_get_utc_offset_of_utc_time")]
		public int get_utc_offset_of_utc_time (iCal.icaltimetype tt, int is_daylight);
		[CCode (cname = "icaltimezone_get_utc_timezone")]
		public static unowned iCal.icaltimezone get_utc_timezone ();
		[CCode (cname = "icaltimezone_release_zone_tab")]
		public static void release_zone_tab ();
		[CCode (cname = "icaltimezone_set_component")]
		public int set_component (iCal.icalcomponent comp);
		[CCode (cname = "icaltimezone_set_tzid_prefix")]
		public static void set_tzid_prefix (string new_prefix);
	}
	[CCode (cheader_filename = "libical/ical.h", free_function = "icalvalue_free")]
	[Compact]
	public class icalvalue {
		[CCode (cname = "icalvalue_new", has_construct_function = false)]
		public icalvalue (iCal.icalvalue_kind kind);
		[CCode (cname = "icalvalue_new_action", has_construct_function = false)]
		public icalvalue.action (iCal.icalproperty_action v);
		[CCode (cname = "icalvalue_as_ical_string")]
		public unowned global::string as_ical_string ();
		[CCode (cname = "icalvalue_as_ical_string_r")]
		public global::string as_ical_string_r ();
		[CCode (cname = "icalvalue_new_attach", has_construct_function = false)]
		public icalvalue.attach (iCal.icalattach attach);
		[CCode (cname = "icalvalue_new_binary", has_construct_function = false)]
		public icalvalue.binary (global::string v);
		[CCode (cname = "icalvalue_new_boolean", has_construct_function = false)]
		public icalvalue.boolean (int v);
		[CCode (cname = "icalvalue_new_caladdress", has_construct_function = false)]
		public icalvalue.caladdress (global::string v);
		[CCode (cname = "icalvalue_new_carlevel", has_construct_function = false)]
		public icalvalue.carlevel (iCal.icalproperty_carlevel v);
		[CCode (cname = "icalvalue_new_class", has_construct_function = false)]
		public icalvalue.@class (iCal.icalproperty_class v);
		[CCode (cname = "icalvalue_new_clone", has_construct_function = false)]
		public icalvalue.clone (iCal.icalvalue value);
		[CCode (cname = "icalvalue_new_cmd", has_construct_function = false)]
		public icalvalue.cmd (iCal.icalproperty_cmd v);
		[CCode (cname = "icalvalue_compare")]
		public iCal.icalparameter_xliccomparetype compare (iCal.icalvalue b);
		[CCode (cname = "icalvalue_new_date", has_construct_function = false)]
		public icalvalue.date (iCal.icaltimetype v);
		[CCode (cname = "icalvalue_new_datetime", has_construct_function = false)]
		public icalvalue.datetime (iCal.icaltimetype v);
		[CCode (cname = "icalvalue_new_datetimeperiod", has_construct_function = false)]
		public icalvalue.datetimeperiod (iCal.icaldatetimeperiodtype v);
		[CCode (cname = "icalvalue_decode_ical_string")]
		public static int decode_ical_string (global::string szText, global::string szDecText, int nMaxBufferLen);
		[CCode (cname = "icalvalue_new_duration", has_construct_function = false)]
		public icalvalue.duration (iCal.icaldurationtype v);
		[CCode (cname = "icalvalue_encode_ical_string")]
		public static int encode_ical_string (global::string szText, global::string szEncText, int MaxBufferLen);
		[CCode (cname = "icalvalue_new_float", has_construct_function = false)]
		public icalvalue.float (global::float v);
		[CCode (cname = "icalvalue_new_from_string", has_construct_function = false)]
		public icalvalue.from_string (iCal.icalvalue_kind kind, global::string str);
		[CCode (cname = "icalvalue_new_geo", has_construct_function = false)]
		public icalvalue.geo (iCal.icalgeotype v);
		[CCode (cname = "icalvalue_get_action")]
		public iCal.icalproperty_action get_action ();
		[CCode (cname = "icalvalue_get_attach")]
		public unowned iCal.icalattach get_attach ();
		[CCode (cname = "icalvalue_get_binary")]
		public unowned global::string get_binary ();
		[CCode (cname = "icalvalue_get_boolean")]
		public int get_boolean ();
		[CCode (cname = "icalvalue_get_caladdress")]
		public unowned global::string get_caladdress ();
		[CCode (cname = "icalvalue_get_carlevel")]
		public iCal.icalproperty_carlevel get_carlevel ();
		[CCode (cname = "icalvalue_get_class")]
		public iCal.icalproperty_class get_class ();
		[CCode (cname = "icalvalue_get_cmd")]
		public iCal.icalproperty_cmd get_cmd ();
		[CCode (cname = "icalvalue_get_date")]
		public iCal.icaltimetype get_date ();
		[CCode (cname = "icalvalue_get_datetime")]
		public iCal.icaltimetype get_datetime ();
		[CCode (cname = "icalvalue_get_datetimeperiod")]
		public iCal.icaldatetimeperiodtype get_datetimeperiod ();
		[CCode (cname = "icalvalue_get_duration")]
		public unowned iCal.icaldurationtype get_duration ();
		[CCode (cname = "icalvalue_get_float")]
		public global::float get_float ();
		[CCode (cname = "icalvalue_get_geo")]
		public iCal.icalgeotype get_geo ();
		[CCode (cname = "icalvalue_get_integer")]
		public int get_integer ();
		[CCode (cname = "icalvalue_get_method")]
		public iCal.icalproperty_method get_method ();
		[CCode (cname = "icalvalue_get_period")]
		public iCal.icalperiodtype get_period ();
		[CCode (cname = "icalvalue_get_query")]
		public unowned global::string get_query ();
		[CCode (cname = "icalvalue_get_querylevel")]
		public iCal.icalproperty_querylevel get_querylevel ();
		[CCode (cname = "icalvalue_get_recur")]
		public iCal.icalrecurrencetype get_recur ();
		[CCode (cname = "icalvalue_get_requeststatus")]
		public iCal.icalreqstattype get_requeststatus ();
		[CCode (cname = "icalvalue_get_status")]
		public iCal.icalproperty_status get_status ();
		[CCode (cname = "icalvalue_get_string")]
		public unowned global::string get_string ();
		[CCode (cname = "icalvalue_get_text")]
		public unowned global::string get_text ();
		[CCode (cname = "icalvalue_get_transp")]
		public iCal.icalproperty_transp get_transp ();
		[CCode (cname = "icalvalue_get_trigger")]
		public iCal.icaltriggertype get_trigger ();
		[CCode (cname = "icalvalue_get_uri")]
		public unowned global::string get_uri ();
		[CCode (cname = "icalvalue_get_utcoffset")]
		public int get_utcoffset ();
		[CCode (cname = "icalvalue_get_x")]
		public unowned global::string get_x ();
		[CCode (cname = "icalvalue_get_xlicclass")]
		public iCal.icalproperty_xlicclass get_xlicclass ();
		[CCode (cname = "icalvalue_new_integer", has_construct_function = false)]
		public icalvalue.integer (int v);
		[CCode (cname = "icalvalue_is_valid")]
		public int is_valid ();
		[CCode (cname = "icalvalue_isa")]
		public iCal.icalvalue_kind isa ();
		[CCode (cname = "icalvalue_isa_value")]
		public static int isa_value (void* p1);
		[CCode (cname = "icalvalue_kind_is_valid")]
		public static int kind_is_valid (iCal.icalvalue_kind kind);
		[CCode (cname = "icalvalue_kind_to_string")]
		public static unowned global::string kind_to_string (iCal.icalvalue_kind kind);
		[CCode (cname = "icalvalue_new_method", has_construct_function = false)]
		public icalvalue.method (iCal.icalproperty_method v);
		[CCode (cname = "icalvalue_new_period", has_construct_function = false)]
		public icalvalue.period (iCal.icalperiodtype v);
		[CCode (cname = "icalvalue_new_query", has_construct_function = false)]
		public icalvalue.query (global::string v);
		[CCode (cname = "icalvalue_new_querylevel", has_construct_function = false)]
		public icalvalue.querylevel (iCal.icalproperty_querylevel v);
		[CCode (cname = "icalvalue_new_recur", has_construct_function = false)]
		public icalvalue.recur (iCal.icalrecurrencetype v);
		[CCode (cname = "icalvalue_new_requeststatus", has_construct_function = false)]
		public icalvalue.requeststatus (iCal.icalreqstattype v);
		[CCode (cname = "icalvalue_reset_kind")]
		public void reset_kind ();
		[CCode (cname = "icalvalue_set_action")]
		public void set_action (iCal.icalproperty_action v);
		[CCode (cname = "icalvalue_set_attach")]
		public void set_attach (iCal.icalattach attach);
		[CCode (cname = "icalvalue_set_binary")]
		public void set_binary (global::string v);
		[CCode (cname = "icalvalue_set_boolean")]
		public void set_boolean (int v);
		[CCode (cname = "icalvalue_set_caladdress")]
		public void set_caladdress (global::string v);
		[CCode (cname = "icalvalue_set_carlevel")]
		public void set_carlevel (iCal.icalproperty_carlevel v);
		[CCode (cname = "icalvalue_set_class")]
		public void set_class (iCal.icalproperty_class v);
		[CCode (cname = "icalvalue_set_cmd")]
		public void set_cmd (iCal.icalproperty_cmd v);
		[CCode (cname = "icalvalue_set_date")]
		public void set_date (iCal.icaltimetype v);
		[CCode (cname = "icalvalue_set_datetime")]
		public void set_datetime (iCal.icaltimetype v);
		[CCode (cname = "icalvalue_set_datetimeperiod")]
		public void set_datetimeperiod (iCal.icaldatetimeperiodtype v);
		[CCode (cname = "icalvalue_set_duration")]
		public void set_duration (iCal.icaldurationtype v);
		[CCode (cname = "icalvalue_set_float")]
		public void set_float (global::float v);
		[CCode (cname = "icalvalue_set_geo")]
		public void set_geo (iCal.icalgeotype v);
		[CCode (cname = "icalvalue_set_integer")]
		public void set_integer (int v);
		[CCode (cname = "icalvalue_set_method")]
		public void set_method (iCal.icalproperty_method v);
		[CCode (cname = "icalvalue_set_period")]
		public void set_period (iCal.icalperiodtype v);
		[CCode (cname = "icalvalue_set_query")]
		public void set_query (global::string v);
		[CCode (cname = "icalvalue_set_querylevel")]
		public void set_querylevel (iCal.icalproperty_querylevel v);
		[CCode (cname = "icalvalue_set_recur")]
		public void set_recur (iCal.icalrecurrencetype v);
		[CCode (cname = "icalvalue_set_requeststatus")]
		public void set_requeststatus (iCal.icalreqstattype v);
		[CCode (cname = "icalvalue_set_status")]
		public void set_status (iCal.icalproperty_status v);
		[CCode (cname = "icalvalue_set_string")]
		public void set_string (global::string v);
		[CCode (cname = "icalvalue_set_text")]
		public void set_text (global::string v);
		[CCode (cname = "icalvalue_set_transp")]
		public void set_transp (iCal.icalproperty_transp v);
		[CCode (cname = "icalvalue_set_trigger")]
		public void set_trigger (iCal.icaltriggertype v);
		[CCode (cname = "icalvalue_set_uri")]
		public void set_uri (global::string v);
		[CCode (cname = "icalvalue_set_utcoffset")]
		public void set_utcoffset (int v);
		[CCode (cname = "icalvalue_set_x")]
		public void set_x (global::string v);
		[CCode (cname = "icalvalue_set_xlicclass")]
		public void set_xlicclass (iCal.icalproperty_xlicclass v);
		[CCode (cname = "icalvalue_new_status", has_construct_function = false)]
		public icalvalue.status (iCal.icalproperty_status v);
		[CCode (cname = "icalvalue_new_string", has_construct_function = false)]
		public icalvalue.string (global::string v);
		[CCode (cname = "icalvalue_string_to_kind")]
		public static iCal.icalvalue_kind string_to_kind (global::string str);
		[CCode (cname = "icalvalue_new_text", has_construct_function = false)]
		public icalvalue.text (global::string v);
		[CCode (cname = "icalvalue_new_transp", has_construct_function = false)]
		public icalvalue.transp (iCal.icalproperty_transp v);
		[CCode (cname = "icalvalue_new_trigger", has_construct_function = false)]
		public icalvalue.trigger (iCal.icaltriggertype v);
		[CCode (cname = "icalvalue_new_uri", has_construct_function = false)]
		public icalvalue.uri (global::string v);
		[CCode (cname = "icalvalue_new_utcoffset", has_construct_function = false)]
		public icalvalue.utcoffset (int v);
		[CCode (cname = "icalvalue_new_x", has_construct_function = false)]
		public icalvalue.x (global::string v);
		[CCode (cname = "icalvalue_new_xlicclass", has_construct_function = false)]
		public icalvalue.xlicclass (iCal.icalproperty_xlicclass v);
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class pvl_elem {
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class pvl_elem_t {
		public int MAGIC;
		public void* d;
		public weak iCal.pvl_elem_t next;
		public weak iCal.pvl_elem_t prior;
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class pvl_list {
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class sspm_encoding {
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class sspm_error {
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class sspm_major_type {
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[Compact]
	public class sspm_minor_type {
	}
	[CCode (cheader_filename = "libical/ical.h", cname="struct icaldatetimeperiodtype")]
	[SimpleType]
	public struct icaldatetimeperiodtype {
		public iCal.icaltimetype time;
		public iCal.icalperiodtype period;
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public struct icalgeotype {
		public float lat;
		public float lon;
	}
	[CCode (cheader_filename = "libical/ical.h", cname="struct icalperiodtype")]
	[SimpleType]
	public struct icalperiodtype {
		public iCal.icaltimetype start;
		public iCal.icaltimetype end;
		public weak iCal.icaldurationtype duration;
		[CCode (cname = "icalperiodtype_as_ical_string")]
		public unowned string as_ical_string ();
		[CCode (cname = "icalperiodtype_as_ical_string_r")]
		public string as_ical_string_r ();
		[CCode (cname = "icalperiodtype_from_string")]
		public static iCal.icalperiodtype from_string (string str);
		[CCode (cname = "icalperiodtype_is_null_period")]
		public int is_null_period ();
		[CCode (cname = "icalperiodtype_is_valid_period")]
		public int is_valid_period ();
		[CCode (cname = "icalperiodtype_null_period")]
		public static iCal.icalperiodtype null_period ();
	}
	public const int RECURRENCE_ARRAY_MAX;
	public const int RUCURRENCE_ARRAY_MAX_BYTE;
	[CCode (cheader_filename = "libical/ical.h", cname="struct icalrecurrencetype")]
	[SimpleType]
	public struct icalrecurrencetype {
		public iCal.icalrecurrencetype_frequency freq;
		public iCal.icaltimetype until;
		public int count;
		public short interval;
		public iCal.icalrecurrencetype_weekday week_start;
		public unowned short by_second[61];
		public unowned short by_minute[61];
		public unowned short by_hour[25];
		public unowned short by_day[364];
		public unowned short by_month_day[32];
		public unowned short by_year_day[367];
		public unowned short by_week_no[54];
		public unowned short by_month[13];
		public unowned short by_set_pos[367];
		[CCode (cname = "icalrecurrencetype_as_string")]
		public unowned string as_string ();
		[CCode (cname = "icalrecurrencetype_as_string_r")]
		public string as_string_r ();
		[CCode (cname = "icalrecurrencetype_clear")]
		public void clear ();
		[CCode (cname = "icalrecurrencetype_day_day_of_week")]
		public static iCal.icalrecurrencetype_weekday day_day_of_week (short day);
		[CCode (cname = "icalrecurrencetype_day_position")]
		public static int day_position (short day);
		[CCode (cname = "icalrecurrencetype_from_string")]
		public static iCal.icalrecurrencetype from_string (string str);
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public struct icalreqstattype {
		public iCal.icalrequeststatus code;
		public weak string desc;
		public weak string debug;
		[CCode (cname = "icalreqstattype_as_string")]
		public unowned string as_string ();
		[CCode (cname = "icalreqstattype_as_string_r")]
		public string as_string_r ();
		[CCode (cname = "icalreqstattype_from_string")]
		public static iCal.icalreqstattype from_string (string str);
	}
	[CCode (cheader_filename = "libical/ical.h")]
	[SimpleType]
	public struct icaltimetype {
		public int year;
		public int month;
		public int day;
		public int hour;
		public int minute;
		public int second;
		public int is_utc;
		public int is_date;
		public int is_daylight;
		public iCal.icaltimezone *zone;
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public struct icaltimezonephase {
		public weak string tzname;
		public int is_stdandard;
		public iCal.icaltimetype dtstart;
		public int offsetto;
		public int tzoffsetfrom;
		public weak string comment;
		public iCal.icaldatetimeperiodtype rdate;
		public weak string rrule;
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public struct icaltimezonetype {
		public weak string tzid;
		public iCal.icaltimetype last_mod;
		public weak string tzurl;
		public iCal.icaltimezonephase phases;
		[CCode (cname = "icaltimezonetype_free")]
		public void free ();
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public struct icaltriggertype {
		public iCal.icaltimetype time;
		public weak iCal.icaldurationtype duration;
		[CCode (cname = "icaltriggertype_from_int")]
		public static iCal.icaltriggertype from_int (int reltime);
		[CCode (cname = "icaltriggertype_from_string")]
		public static iCal.icaltriggertype from_string (string str);
		[CCode (cname = "icaltriggertype_is_bad_trigger")]
		public int is_bad_trigger ();
		[CCode (cname = "icaltriggertype_is_null_trigger")]
		public int is_null_trigger ();
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public struct sspm_action_map {
		public weak iCal.sspm_major_type major;
		public weak iCal.sspm_minor_type minor;
		public weak GLib.Callback new_part;
		public weak GLib.Callback add_line;
		public weak GLib.Callback end_part;
		public weak GLib.Callback free_part;
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public struct sspm_header {
		public int def;
		public weak string boundary;
		public weak iCal.sspm_major_type major;
		public weak iCal.sspm_minor_type minor;
		public weak string minor_text;
		public weak string content_type_params;
		public weak string charset;
		public weak iCal.sspm_encoding encoding;
		public weak string filename;
		public weak string content_id;
		public weak iCal.sspm_error error;
		public weak string error_text;
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public struct sspm_part {
		public iCal.sspm_header header;
		public int level;
		public size_t data_size;
		public void* data;
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_", has_type_id = false)]
	public enum icalcomponent_kind {
		NO_COMPONENT,
		ANY_COMPONENT,
		XROOT_COMPONENT,
		XATTACH_COMPONENT,
		VEVENT_COMPONENT,
		VTODO_COMPONENT,
		VJOURNAL_COMPONENT,
		VCALENDAR_COMPONENT,
		VAGENDA_COMPONENT,
		VFREEBUSY_COMPONENT,
		VALARM_COMPONENT,
		XAUDIOALARM_COMPONENT,
		XDISPLAYALARM_COMPONENT,
		XEMAILALARM_COMPONENT,
		XPROCEDUREALARM_COMPONENT,
		VTIMEZONE_COMPONENT,
		XSTANDARD_COMPONENT,
		XDAYLIGHT_COMPONENT,
		X_COMPONENT,
		VSCHEDULE_COMPONENT,
		VQUERY_COMPONENT,
		VREPLY_COMPONENT,
		VCAR_COMPONENT,
		VCOMMAND_COMPONENT,
		XLICINVALID_COMPONENT,
		XLICMIMEPART_COMPONENT
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_", has_type_id = false)]
	public enum icalerrorenum {
		NO_ERROR,
		BADARG_ERROR,
		NEWFAILED_ERROR,
		ALLOCATION_ERROR,
		MALFORMEDDATA_ERROR,
		PARSE_ERROR,
		INTERNAL_ERROR,
		FILE_ERROR,
		USAGE_ERROR,
		UNIMPLEMENTED_ERROR,
		UNKNOWN_ERROR
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_ERROR_", has_type_id = false)]
	public enum icalerrorstate {
		FATAL,
		NONFATAL,
		DEFAULT,
		UNKNOWN
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_ACTIONPARAM_", has_type_id = false)]
	public enum icalparameter_action {
		X,
		ASK,
		ABORT,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_CUTYPE_", has_type_id = false)]
	public enum icalparameter_cutype {
		X,
		INDIVIDUAL,
		GROUP,
		RESOURCE,
		ROOM,
		UNKNOWN,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_ENABLE_", has_type_id = false)]
	public enum icalparameter_enable {
		X,
		TRUE,
		FALSE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_ENCODING_", has_type_id = false)]
	public enum icalparameter_encoding {
		X,
		@8BIT,
		BASE64,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_FBTYPE_", has_type_id = false)]
	public enum icalparameter_fbtype {
		X,
		FREE,
		BUSY,
		BUSYUNAVAILABLE,
		BUSYTENTATIVE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_", has_type_id = false)]
	public enum icalparameter_kind {
		ANY_PARAMETER,
		ACTIONPARAM_PARAMETER,
		ALTREP_PARAMETER,
		CHARSET_PARAMETER,
		CN_PARAMETER,
		CUTYPE_PARAMETER,
		DELEGATEDFROM_PARAMETER,
		DELEGATEDTO_PARAMETER,
		DIR_PARAMETER,
		ENABLE_PARAMETER,
		ENCODING_PARAMETER,
		FBTYPE_PARAMETER,
		FMTTYPE_PARAMETER,
		ID_PARAMETER,
		LANGUAGE_PARAMETER,
		LATENCY_PARAMETER,
		LOCAL_PARAMETER,
		LOCALIZE_PARAMETER,
		MEMBER_PARAMETER,
		OPTIONS_PARAMETER,
		PARTSTAT_PARAMETER,
		RANGE_PARAMETER,
		RELATED_PARAMETER,
		RELTYPE_PARAMETER,
		ROLE_PARAMETER,
		RSVP_PARAMETER,
		SENTBY_PARAMETER,
		TZID_PARAMETER,
		VALUE_PARAMETER,
		X_PARAMETER,
		XLICCOMPARETYPE_PARAMETER,
		XLICERRORTYPE_PARAMETER,
		NO_PARAMETER
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_LOCAL_", has_type_id = false)]
	public enum icalparameter_local {
		X,
		TRUE,
		FALSE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_PARTSTAT_", has_type_id = false)]
	public enum icalparameter_partstat {
		X,
		NEEDSACTION,
		ACCEPTED,
		DECLINED,
		TENTATIVE,
		DELEGATED,
		COMPLETED,
		INPROCESS,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_RANGE_", has_type_id = false)]
	public enum icalparameter_range {
		X,
		THISANDPRIOR,
		THISANDFUTURE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_RELATED_", has_type_id = false)]
	public enum icalparameter_related {
		X,
		START,
		END,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_RELTYPE_", has_type_id = false)]
	public enum icalparameter_reltype {
		X,
		PARENT,
		CHILD,
		SIBLING,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_ROLE_", has_type_id = false)]
	public enum icalparameter_role {
		X,
		CHAIR,
		REQPARTICIPANT,
		OPTPARTICIPANT,
		NONPARTICIPANT,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_RSVP_", has_type_id = false)]
	public enum icalparameter_rsvp {
		X,
		TRUE,
		FALSE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_VALUE_", has_type_id = false)]
	public enum icalparameter_value {
		X,
		BINARY,
		BOOLEAN,
		DATE,
		DURATION,
		FLOAT,
		INTEGER,
		PERIOD,
		RECUR,
		TEXT,
		URI,
		ERROR,
		DATETIME,
		UTCOFFSET,
		CALADDRESS,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_XLICCOMPARETYPE_", has_type_id = false)]
	public enum icalparameter_xliccomparetype {
		X,
		EQUAL,
		NOTEQUAL,
		LESS,
		GREATER,
		LESSEQUAL,
		GREATEREQUAL,
		REGEX,
		ISNULL,
		ISNOTNULL,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_XLICERRORTYPE_", has_type_id = false)]
	public enum icalparameter_xlicerrortype {
		X,
		COMPONENTPARSEERROR,
		PROPERTYPARSEERROR,
		PARAMETERNAMEPARSEERROR,
		PARAMETERVALUEPARSEERROR,
		VALUEPARSEERROR,
		INVALIDITIP,
		UNKNOWNVCALPROPERROR,
		MIMEPARSEERROR,
		VCALPROPPARSEERROR,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICALPARSER_", has_type_id = false)]
	public enum icalparser_state {
		ERROR,
		SUCCESS,
		BEGIN_COMP,
		END_COMP,
		IN_PROGRESS
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_ACTION_", has_type_id = false)]
	public enum icalproperty_action {
		X,
		AUDIO,
		DISPLAY,
		EMAIL,
		PROCEDURE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_CARLEVEL_", has_type_id = false)]
	public enum icalproperty_carlevel {
		X,
		CARNONE,
		CARMIN,
		CARFULL1,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_CLASS_", has_type_id = false)]
	public enum icalproperty_class {
		X,
		PUBLIC,
		PRIVATE,
		CONFIDENTIAL,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_CMD_", has_type_id = false)]
	public enum icalproperty_cmd {
		X,
		ABORT,
		CONTINUE,
		CREATE,
		DELETE,
		GENERATEUID,
		GETCAPABILITY,
		IDENTIFY,
		MODIFY,
		MOVE,
		REPLY,
		SEARCH,
		SETLOCALE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_", has_type_id = false)]
	public enum icalproperty_kind {
		ANY_PROPERTY,
		ACTION_PROPERTY,
		ALLOWCONFLICT_PROPERTY,
		ATTACH_PROPERTY,
		ATTENDEE_PROPERTY,
		CALID_PROPERTY,
		CALMASTER_PROPERTY,
		CALSCALE_PROPERTY,
		CAPVERSION_PROPERTY,
		CARLEVEL_PROPERTY,
		CARID_PROPERTY,
		CATEGORIES_PROPERTY,
		CLASS_PROPERTY,
		CMD_PROPERTY,
		COMMENT_PROPERTY,
		COMPLETED_PROPERTY,
		COMPONENTS_PROPERTY,
		CONTACT_PROPERTY,
		CREATED_PROPERTY,
		CSID_PROPERTY,
		DATEMAX_PROPERTY,
		DATEMIN_PROPERTY,
		DECREED_PROPERTY,
		DEFAULTCHARSET_PROPERTY,
		DEFAULTLOCALE_PROPERTY,
		DEFAULTTZID_PROPERTY,
		DEFAULTVCARS_PROPERTY,
		DENY_PROPERTY,
		DESCRIPTION_PROPERTY,
		DTEND_PROPERTY,
		DTSTAMP_PROPERTY,
		DTSTART_PROPERTY,
		DUE_PROPERTY,
		DURATION_PROPERTY,
		EXDATE_PROPERTY,
		EXPAND_PROPERTY,
		EXRULE_PROPERTY,
		FREEBUSY_PROPERTY,
		GEO_PROPERTY,
		GRANT_PROPERTY,
		ITIPVERSION_PROPERTY,
		LASTMODIFIED_PROPERTY,
		LOCATION_PROPERTY,
		MAXCOMPONENTSIZE_PROPERTY,
		MAXDATE_PROPERTY,
		MAXRESULTS_PROPERTY,
		MAXRESULTSSIZE_PROPERTY,
		METHOD_PROPERTY,
		MINDATE_PROPERTY,
		MULTIPART_PROPERTY,
		NAME_PROPERTY,
		ORGANIZER_PROPERTY,
		OWNER_PROPERTY,
		PERCENTCOMPLETE_PROPERTY,
		PERMISSION_PROPERTY,
		PRIORITY_PROPERTY,
		PRODID_PROPERTY,
		QUERY_PROPERTY,
		QUERYLEVEL_PROPERTY,
		QUERYID_PROPERTY,
		QUERYNAME_PROPERTY,
		RDATE_PROPERTY,
		RECURACCEPTED_PROPERTY,
		RECUREXPAND_PROPERTY,
		RECURLIMIT_PROPERTY,
		RECURRENCEID_PROPERTY,
		RELATEDTO_PROPERTY,
		RELCALID_PROPERTY,
		REPEAT_PROPERTY,
		REQUESTSTATUS_PROPERTY,
		RESOURCES_PROPERTY,
		RESTRICTION_PROPERTY,
		RRULE_PROPERTY,
		SCOPE_PROPERTY,
		SEQUENCE_PROPERTY,
		STATUS_PROPERTY,
		STORESEXPANDED_PROPERTY,
		SUMMARY_PROPERTY,
		TARGET_PROPERTY,
		TRANSP_PROPERTY,
		TRIGGER_PROPERTY,
		TZID_PROPERTY,
		TZNAME_PROPERTY,
		TZOFFSETFROM_PROPERTY,
		TZOFFSETTO_PROPERTY,
		TZURL_PROPERTY,
		UID_PROPERTY,
		URL_PROPERTY,
		VERSION_PROPERTY,
		X_PROPERTY,
		XLICCLASS_PROPERTY,
		XLICCLUSTERCOUNT_PROPERTY,
		XLICERROR_PROPERTY,
		XLICMIMECHARSET_PROPERTY,
		XLICMIMECID_PROPERTY,
		XLICMIMECONTENTTYPE_PROPERTY,
		XLICMIMEENCODING_PROPERTY,
		XLICMIMEFILENAME_PROPERTY,
		XLICMIMEOPTINFO_PROPERTY,
		NO_PROPERTY
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_METHOD_", has_type_id = false)]
	public enum icalproperty_method {
		X,
		PUBLISH,
		REQUEST,
		REPLY,
		ADD,
		CANCEL,
		REFRESH,
		COUNTER,
		DECLINECOUNTER,
		CREATE,
		READ,
		RESPONSE,
		MOVE,
		MODIFY,
		GENERATEUID,
		DELETE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_QUERYLEVEL_", has_type_id = false)]
	public enum icalproperty_querylevel {
		X,
		CALQL1,
		CALQLNONE,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_STATUS_", has_type_id = false)]
	public enum icalproperty_status {
		X,
		TENTATIVE,
		CONFIRMED,
		COMPLETED,
		NEEDSACTION,
		CANCELLED,
		INPROCESS,
		DRAFT,
		FINAL,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_TRANSP_", has_type_id = false)]
	public enum icalproperty_transp {
		X,
		OPAQUE,
		OPAQUENOCONFLICT,
		TRANSPARENT,
		TRANSPARENTNOCONFLICT,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_XLICCLASS_", has_type_id = false)]
	public enum icalproperty_xlicclass {
		X,
		PUBLISHNEW,
		PUBLISHUPDATE,
		PUBLISHFREEBUSY,
		REQUESTNEW,
		REQUESTUPDATE,
		REQUESTRESCHEDULE,
		REQUESTDELEGATE,
		REQUESTNEWORGANIZER,
		REQUESTFORWARD,
		REQUESTSTATUS,
		REQUESTFREEBUSY,
		REPLYACCEPT,
		REPLYDECLINE,
		REPLYDELEGATE,
		REPLYCRASHERACCEPT,
		REPLYCRASHERDECLINE,
		ADDINSTANCE,
		CANCELEVENT,
		CANCELINSTANCE,
		CANCELALL,
		REFRESH,
		COUNTER,
		DECLINECOUNTER,
		MALFORMED,
		OBSOLETE,
		MISSEQUENCED,
		UNKNOWN,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_", has_type_id = false)]
	public enum icalrecurrencetype_frequency {
		SECONDLY_RECURRENCE,
		MINUTELY_RECURRENCE,
		HOURLY_RECURRENCE,
		DAILY_RECURRENCE,
		WEEKLY_RECURRENCE,
		MONTHLY_RECURRENCE,
		YEARLY_RECURRENCE,
		NO_RECURRENCE
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_", has_type_id = false)]
	public enum icalrecurrencetype_weekday {
		NO_WEEKDAY,
		SUNDAY_WEEKDAY,
		MONDAY_WEEKDAY,
		TUESDAY_WEEKDAY,
		WEDNESDAY_WEEKDAY,
		THURSDAY_WEEKDAY,
		FRIDAY_WEEKDAY,
		SATURDAY_WEEKDAY
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_", has_type_id = false)]
	public enum icalrequeststatus {
		UNKNOWN_STATUS,
		@2_0_SUCCESS_STATUS,
		@2_1_FALLBACK_STATUS,
		@2_2_IGPROP_STATUS,
		@2_3_IGPARAM_STATUS,
		@2_4_IGXPROP_STATUS,
		@2_5_IGXPARAM_STATUS,
		@2_6_IGCOMP_STATUS,
		@2_7_FORWARD_STATUS,
		@2_8_ONEEVENT_STATUS,
		@2_9_TRUNC_STATUS,
		@2_10_ONETODO_STATUS,
		@2_11_TRUNCRRULE_STATUS,
		@3_0_INVPROPNAME_STATUS,
		@3_1_INVPROPVAL_STATUS,
		@3_2_INVPARAM_STATUS,
		@3_3_INVPARAMVAL_STATUS,
		@3_4_INVCOMP_STATUS,
		@3_5_INVTIME_STATUS,
		@3_6_INVRULE_STATUS,
		@3_7_INVCU_STATUS,
		@3_8_NOAUTH_STATUS,
		@3_9_BADVERSION_STATUS,
		@3_10_TOOBIG_STATUS,
		@3_11_MISSREQCOMP_STATUS,
		@3_12_UNKCOMP_STATUS,
		@3_13_BADCOMP_STATUS,
		@3_14_NOCAP_STATUS,
		@3_15_INVCOMMAND,
		@4_0_BUSY_STATUS,
		@4_1_STORE_ACCESS_DENIED,
		@4_2_STORE_FAILED,
		@4_3_STORE_NOT_FOUND,
		@5_0_MAYBE_STATUS,
		@5_1_UNAVAIL_STATUS,
		@5_2_NOSERVICE_STATUS,
		@5_3_NOSCHED_STATUS,
		@6_1_CONTAINER_NOT_FOUND,
		@9_0_UNRECOGNIZED_COMMAND
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_RESTRICTION_", has_type_id = false)]
	public enum icalrestriction_kind {
		NONE,
		ZERO,
		ONE,
		ZEROPLUS,
		ONEPLUS,
		ZEROORONE,
		ONEEXCLUSIVE,
		ONEMUTUAL,
		UNKNOWN
	}
	[CCode (cheader_filename = "libical/ical.h", cprefix = "ICAL_", has_type_id = false)]
	public enum icalvalue_kind {
		ANY_VALUE,
		QUERY_VALUE,
		DATE_VALUE,
		ATTACH_VALUE,
		GEO_VALUE,
		STATUS_VALUE,
		TRANSP_VALUE,
		STRING_VALUE,
		TEXT_VALUE,
		REQUESTSTATUS_VALUE,
		CMD_VALUE,
		BINARY_VALUE,
		QUERYLEVEL_VALUE,
		PERIOD_VALUE,
		FLOAT_VALUE,
		DATETIMEPERIOD_VALUE,
		CARLEVEL_VALUE,
		INTEGER_VALUE,
		CLASS_VALUE,
		URI_VALUE,
		DURATION_VALUE,
		BOOLEAN_VALUE,
		X_VALUE,
		CALADDRESS_VALUE,
		TRIGGER_VALUE,
		XLICCLASS_VALUE,
		RECUR_VALUE,
		ACTION_VALUE,
		DATETIME_VALUE,
		UTCOFFSET_VALUE,
		METHOD_VALUE,
		NO_VALUE
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public delegate void icalattach_free_fn_t (uint data);
	[CCode (cheader_filename = "libical/ical.h", has_target = false)]
	public delegate void pvl_applyf (void* a, void* b);
	[CCode (cheader_filename = "libical/ical.h", has_target = false)]
	public delegate int pvl_comparef (void* a, void* b);
	[CCode (cheader_filename = "libical/ical.h", has_target = false)]
	public delegate int pvl_findf (void* a, void* b);
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_DAY_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_HOUR_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_MINUTE_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_MONTHDAY_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_MONTH_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_SECOND_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_SETPOS_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_WEEKNO_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int BY_YEARDAY_SIZE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int ICALPARAMETER_FIRST_ENUM;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int ICALPARAMETER_LAST_ENUM;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int ICALPROPERTY_FIRST_ENUM;
	[CCode (cheader_filename = "libical/ical.h")]
	public const int ICALPROPERTY_LAST_ENUM;
	[CCode (cheader_filename = "libical/ical.h")]
	public const string PACKAGE;
	[CCode (cheader_filename = "libical/ical.h")]
	public const string VERSION;
	[CCode (cheader_filename = "libical/ical.h", cname = "decode_base64")]
	public static unowned string decode_base64 (string dest, string src, size_t size);
	[CCode (cheader_filename = "libical/ical.h", cname = "decode_quoted_printable")]
	public static unowned string decode_quoted_printable (string dest, string src, size_t size);
	[CCode (cheader_filename = "libical/ical.h", cname = "free_zone_directory")]
	public static void free_zone_directory ();
	[CCode (cheader_filename = "libical/ical.h", cname = "ical_bt")]
	public static void ical_bt ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icalenum_num_to_reqstat")]
	public static iCal.icalrequeststatus icalenum_num_to_reqstat (short major, short minor);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalenum_reqstat_code")]
	public static unowned string icalenum_reqstat_code (iCal.icalrequeststatus stat);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalenum_reqstat_code_r")]
	public static string icalenum_reqstat_code_r (iCal.icalrequeststatus stat);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalenum_reqstat_desc")]
	public static unowned string icalenum_reqstat_desc (iCal.icalrequeststatus stat);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalenum_reqstat_major")]
	public static short icalenum_reqstat_major (iCal.icalrequeststatus stat);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalenum_reqstat_minor")]
	public static short icalenum_reqstat_minor (iCal.icalrequeststatus stat);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerrno_return")]
	public static iCal.icalerrorenum* icalerrno_return ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_clear_errno")]
	public static void icalerror_clear_errno ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_crash_here")]
	public static void icalerror_crash_here ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_get_error_state")]
	public static iCal.icalerrorstate icalerror_get_error_state (iCal.icalerrorenum error);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_perror")]
	public static unowned string icalerror_perror ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_restore")]
	public static void icalerror_restore (string error, iCal.icalerrorstate es);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_set_errno")]
	public static void icalerror_set_errno (iCal.icalerrorenum x);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_set_error_state")]
	public static void icalerror_set_error_state (iCal.icalerrorenum error, iCal.icalerrorstate p2);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_stop_here")]
	public static void icalerror_stop_here ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_strerror")]
	public static unowned string icalerror_strerror (iCal.icalerrorenum e);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalerror_supress")]
	public static iCal.icalerrorstate icalerror_supress (string error);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_access_array")]
	public static int icallangbind_access_array (int array, int index);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_free_array")]
	public static void icallangbind_free_array (int array);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_component")]
	public static unowned iCal.icalcomponent icallangbind_get_component (iCal.icalcomponent c, string comp);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_first_component")]
	public static unowned iCal.icalcomponent icallangbind_get_first_component (iCal.icalcomponent c, string comp);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_first_parameter")]
	public static unowned iCal.icalparameter icallangbind_get_first_parameter (iCal.icalproperty prop);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_first_property")]
	public static unowned iCal.icalproperty icallangbind_get_first_property (iCal.icalcomponent c, string prop);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_next_component")]
	public static unowned iCal.icalcomponent icallangbind_get_next_component (iCal.icalcomponent c, string comp);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_next_parameter")]
	public static unowned iCal.icalparameter icallangbind_get_next_parameter (iCal.icalproperty prop);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_next_property")]
	public static unowned iCal.icalproperty icallangbind_get_next_property (iCal.icalcomponent c, string prop);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_parameter")]
	public static unowned string icallangbind_get_parameter (iCal.icalproperty p, string parameter);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_property")]
	public static unowned iCal.icalproperty icallangbind_get_property (iCal.icalcomponent c, int n, string prop);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_get_property_val")]
	public static unowned string icallangbind_get_property_val (iCal.icalproperty p);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_new_array")]
	public static int icallangbind_new_array (int size);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_property_eval_string")]
	public static unowned string icallangbind_property_eval_string (iCal.icalproperty prop, string sep);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_property_eval_string_r")]
	public static string icallangbind_property_eval_string_r (iCal.icalproperty prop, string sep);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_quote_as_ical")]
	public static unowned string icallangbind_quote_as_ical (string str);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_quote_as_ical_r")]
	public static string icallangbind_quote_as_ical_r (string str);
	[CCode (cheader_filename = "libical/ical.h", cname = "icallangbind_string_to_open_flag")]
	public static int icallangbind_string_to_open_flag (string str);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_add_tmp_buffer")]
	public static void icalmemory_add_tmp_buffer (void* p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_append_char")]
	public static void icalmemory_append_char (out unowned string buf, out unowned string pos, size_t buf_size, GLib.ObjectPath ch);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_append_string")]
	public static void icalmemory_append_string (out unowned string buf, out unowned string pos, size_t buf_size, string str);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_free_buffer")]
	public static void icalmemory_free_buffer (void* buf);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_free_ring")]
	public static void icalmemory_free_ring ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_new_buffer")]
	public static void* icalmemory_new_buffer (size_t size);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_resize_buffer")]
	public static void* icalmemory_resize_buffer (void* buf, size_t size);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_strdup")]
	public static unowned string icalmemory_strdup (string s);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_tmp_buffer")]
	public static void* icalmemory_tmp_buffer (size_t size);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmemory_tmp_copy")]
	public static unowned string icalmemory_tmp_copy (string str);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmime_as_mime_string")]
	public static unowned string icalmime_as_mime_string (string component);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalmime_parse")]
	public static unowned iCal.icalcomponent icalmime_parse (GLib.Callback line_gen_func, void* data);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrecur_expand_recurrence")]
	public static int icalrecur_expand_recurrence (string rule, time_t start, [CCode (array_length_pos = 2, array_length_type = "int")] time_t[] array);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrecur_iterator_decrement_count")]
	public static void icalrecur_iterator_decrement_count (iCal.icalrecur_iterator p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrecur_iterator_free")]
	public static void icalrecur_iterator_free (iCal.icalrecur_iterator p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrecur_iterator_new")]
	public static unowned iCal.icalrecur_iterator icalrecur_iterator_new (iCal.icalrecurrencetype rule, iCal.icaltimetype dtstart);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrecur_iterator_next")]
	public static iCal.icaltimetype icalrecur_iterator_next (iCal.icalrecur_iterator p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrecur_string_to_weekday")]
	public static iCal.icalrecurrencetype_weekday icalrecur_string_to_weekday (string str);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrestriction_check")]
	public static int icalrestriction_check (iCal.icalcomponent comp);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrestriction_compare")]
	public static int icalrestriction_compare (iCal.icalrestriction_kind restr, int count);
	[CCode (cheader_filename = "libical/ical.h", cname = "icalrestriction_is_parameter_allowed")]
	public static int icalrestriction_is_parameter_allowed (iCal.icalproperty_kind property, iCal.icalparameter_kind parameter);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_add")]
	public static iCal.icaltimetype icaltime_add (iCal.icaltimetype t, iCal.icaldurationtype d);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_adjust")]
	public static void icaltime_adjust (iCal.icaltimetype tt, int days, int hours, int minutes, int seconds);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_as_ical_string")]
	public static unowned string icaltime_as_ical_string (iCal.icaltimetype tt);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_as_timet")]
	public static ulong icaltime_as_timet (iCal.icaltimetype p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_as_timet_with_zone")]
	public static ulong icaltime_as_timet_with_zone (iCal.icaltimetype tt, iCal.icaltimezone zone);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_compare")]
	public static int icaltime_compare (iCal.icaltimetype a, iCal.icaltimetype b);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_compare_date_only")]
	public static int icaltime_compare_date_only (iCal.icaltimetype a, iCal.icaltimetype b);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_compare_date_only_tz")]
	public static int icaltime_compare_date_only_tz (iCal.icaltimetype a, iCal.icaltimetype b, iCal.icaltimezone tz);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_compare_with_zone")]
	public static int icaltime_compare_with_zone (iCal.icaltimetype a, iCal.icaltimetype b);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_convert_to_zone")]
	public static iCal.icaltimetype icaltime_convert_to_zone (iCal.icaltimetype tt, iCal.icaltimezone zone);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_current_time_with_zone")]
	public static iCal.icaltimetype icaltime_current_time_with_zone (iCal.icaltimezone zone);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_day_of_week")]
	public static int icaltime_day_of_week (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_day_of_year")]
	public static int icaltime_day_of_year (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_days_in_month")]
	public static int icaltime_days_in_month (int month, int year);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_days_in_year")]
	public static int icaltime_days_in_year (int year);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_from_day_of_year")]
	public static iCal.icaltimetype icaltime_from_day_of_year (int doy, int year);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_from_string")]
	public static iCal.icaltimetype icaltime_from_string (string str);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_from_string_with_zone")]
	public static iCal.icaltimetype icaltime_from_string_with_zone (string str, iCal.icaltimezone zone);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_from_timet")]
	public static iCal.icaltimetype icaltime_from_timet (time_t v, int is_date);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_from_timet_with_zone")]
	public static iCal.icaltimetype icaltime_from_timet_with_zone (time_t tm, int is_date, iCal.icaltimezone zone);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_from_week_number")]
	public static iCal.icaltimetype icaltime_from_week_number (int week_number, int year);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_get_timezone")]
	public static unowned iCal.icaltimezone icaltime_get_timezone (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_get_tzid")]
	public static unowned string icaltime_get_tzid (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_is_date")]
	public static int icaltime_is_date (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_is_floating")]
	public static int icaltime_is_floating (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_is_leap_year")]
	public static int icaltime_is_leap_year (int year);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_is_null_time")]
	public static int icaltime_is_null_time (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_is_utc")]
	public static int icaltime_is_utc (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_is_valid_time")]
	public static int icaltime_is_valid_time (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_normalize")]
	public static iCal.icaltimetype icaltime_normalize (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_null_date")]
	public static iCal.icaltimetype icaltime_null_date ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_null_time")]
	public static iCal.icaltimetype icaltime_null_time ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_set_timezone")]
	public static iCal.icaltimetype icaltime_set_timezone (iCal.icaltimetype t, iCal.icaltimezone zone);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_span_contains")]
	public static int icaltime_span_contains (iCal.icaltime_span s, iCal.icaltime_span container);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_span_new")]
	public static unowned iCal.icaltime_span icaltime_span_new (iCal.icaltimetype dtstart, iCal.icaltimetype dtend, int is_busy);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_span_overlaps")]
	public static int icaltime_span_overlaps (iCal.icaltime_span s1, iCal.icaltime_span s2);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_start_doy_of_week")]
	public static int icaltime_start_doy_of_week (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_start_doy_week")]
	public static int icaltime_start_doy_week (iCal.icaltimetype t, int fdow);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_subtract")]
	public static unowned iCal.icaldurationtype icaltime_subtract (iCal.icaltimetype t1, iCal.icaltimetype t2);
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_today")]
	public static iCal.icaltimetype icaltime_today ();
	[CCode (cheader_filename = "libical/ical.h", cname = "icaltime_week_number")]
	public static int icaltime_week_number (iCal.icaltimetype t);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_apply")]
	public static void pvl_apply (iCal.pvl_list l, iCal.pvl_applyf f, void* v);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_clear")]
	public static void pvl_clear (iCal.pvl_list p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_count")]
	public static int pvl_count (iCal.pvl_list p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_data")]
	public static void* pvl_data (iCal.pvl_elem p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_find")]
	public static unowned iCal.pvl_elem pvl_find (iCal.pvl_list l, iCal.pvl_findf f, void* v);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_find_next")]
	public static unowned iCal.pvl_elem pvl_find_next (iCal.pvl_list l, iCal.pvl_findf f, void* v);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_free")]
	public static void pvl_free (iCal.pvl_list p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_head")]
	public static unowned iCal.pvl_elem pvl_head (iCal.pvl_list p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_insert_after")]
	public static void pvl_insert_after (iCal.pvl_list l, iCal.pvl_elem e, void* d);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_insert_before")]
	public static void pvl_insert_before (iCal.pvl_list l, iCal.pvl_elem e, void* d);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_insert_ordered")]
	public static void pvl_insert_ordered (iCal.pvl_list l, iCal.pvl_comparef f, void* d);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_new_element")]
	public static unowned iCal.pvl_elem pvl_new_element (void* d, iCal.pvl_elem next, iCal.pvl_elem prior);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_newlist")]
	public static unowned iCal.pvl_list pvl_newlist ();
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_next")]
	public static unowned iCal.pvl_elem pvl_next (iCal.pvl_elem e);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_pop")]
	public static void* pvl_pop (iCal.pvl_list l);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_prior")]
	public static unowned iCal.pvl_elem pvl_prior (iCal.pvl_elem e);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_push")]
	public static void pvl_push (iCal.pvl_list l, void* d);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_remove")]
	public static void* pvl_remove (iCal.pvl_list p1, iCal.pvl_elem p2);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_shift")]
	public static void* pvl_shift (iCal.pvl_list l);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_tail")]
	public static unowned iCal.pvl_elem pvl_tail (iCal.pvl_list p1);
	[CCode (cheader_filename = "libical/ical.h", cname = "pvl_unshift")]
	public static void pvl_unshift (iCal.pvl_list l, void* d);
	[CCode (cheader_filename = "libical/ical.h", cname = "set_zone_directory")]
	public static void set_zone_directory (string path);
	[CCode (cheader_filename = "libical/ical.h", cname = "sspm_encoding_string")]
	public static unowned string sspm_encoding_string (iCal.sspm_encoding type);
	[CCode (cheader_filename = "libical/ical.h", cname = "sspm_free_parts")]
	public static void sspm_free_parts (iCal.sspm_part parts, size_t max_parts);
	[CCode (cheader_filename = "libical/ical.h", cname = "sspm_major_type_string")]
	public static unowned string sspm_major_type_string (iCal.sspm_major_type type);
	[CCode (cheader_filename = "libical/ical.h", cname = "sspm_minor_type_string")]
	public static unowned string sspm_minor_type_string (iCal.sspm_minor_type type);
	[CCode (cheader_filename = "libical/ical.h", cname = "sspm_parse_mime")]
	public static int sspm_parse_mime (iCal.sspm_part parts, size_t max_parts, iCal.sspm_action_map actions, GLib.Callback get_string, void* get_string_data, ...);
	[CCode (cheader_filename = "libical/ical.h", cname = "sspm_write_mime")]
	public static int sspm_write_mime (iCal.sspm_part parts, size_t num_parts, out unowned string output_string, string header);
}
